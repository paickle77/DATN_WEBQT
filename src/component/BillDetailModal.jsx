// üî• FIXED BillDetailModal - S·ª≠a l·ªói ƒë∆°n gi√° v√† c·∫£i thi·ªán hi·ªÉn th·ªã
import React from 'react';
import './BillDetailModal.scss';

const BillDetailModal = ({ bill, onClose, onPrint }) => {
  console.log('üîç Bill detail modal data:', bill);
  console.log('üîç Items data:', bill.items);

  // üî• S·ª¨ D·ª§NG D·ªÆ LI·ªÜU ƒê√É T√çNH S·∫¥N T·ª™ API ENRICHED
  const items = Array.isArray(bill.items) ? bill.items : [];
  
  // üî• DEBUG: Log t·ª´ng item ƒë·ªÉ check c·∫•u tr√∫c d·ªØ li·ªáu
  items.forEach((item, i) => {
    console.log(`Item ${i}:`, {
      productName: item.productName || item.name,
      unitPrice: item.unitPrice || item.price || item.unit_price,
      quantity: item.quantity || item.qty,
      originalItem: item
    });
  });
  
  // ∆Øu ti√™n s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ format t·ª´ backend
  const financialInfo = {
    subtotal: bill.subtotal || 0,
    shippingFee: bill.shippingFee || 0,
    discountAmount: bill.discountAmount || 0,
    finalTotal: bill.finalTotal || bill.total || 0,
    
    // Formatted values t·ª´ backend
    subtotal_formatted: bill.subtotal_formatted || `${Number(bill.subtotal || 0).toLocaleString('vi-VN')} ƒë`,
    shipping_fee_formatted: bill.shipping_fee_formatted || `${Number(bill.shippingFee || 0).toLocaleString('vi-VN')} ƒë`,
    discount_formatted: bill.discount_formatted || `${Number(bill.discountAmount || 0).toLocaleString('vi-VN')} ƒë`,
    total_formatted: bill.total_formatted || `${Number(bill.total || 0).toLocaleString('vi-VN')} ƒë`
  };

  // üî• TH√îNG TIN KH√ÅCH H√ÄNG V√Ä GIAO H√ÄNG T·ª™ ENRICHED DATA
  const customerInfo = {
    name: bill.customerName || bill.userName || 'Kh√°ch h√†ng kh√¥ng r√µ',
    phone: bill.customerPhone || '',
    address: bill.customerAddress || bill.addressStr || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ'
  };

  const deliveryInfo = {
    name: bill.deliveryName || 'Ch∆∞a c√≥ t√™n ng∆∞·ªùi nh·∫≠n',
    phone: bill.deliveryPhone || 'Ch∆∞a c√≥ SƒêT',
    address: bill.deliveryAddress || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ giao h√†ng'
  };

  // üî• TH√îNG TIN THANH TO√ÅN V√Ä GIAO H√ÄNG
  const orderInfo = {
    shippingMethod: bill.shippingMethodDisplay || bill.shipping_method || 'Ch∆∞a ch·ªçn',
    paymentMethod: bill.paymentMethodDisplay || bill.payment_method || 'Ch∆∞a ch·ªçn',
    voucherCode: bill.voucherDisplayCode || bill.voucherCode || '‚Äî',
    status: bill.statusDisplay || bill.status || 'N/A',
    createdDate: bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleString('vi-VN') : 'N/A'),
    updatedDate: bill.updated_at ? new Date(bill.updated_at).toLocaleString('vi-VN') : null
  };

  // üî• L·ªäCH S·ª¨ TR·∫†NG TH√ÅI (n·∫øu c√≥)
  const statusHistory = bill.statusHistory || [];

  // üî• H√ÄM L·∫§Y GI√Å S·∫¢N PH·∫®M - FIX LOGIC L·∫§Y GI√Å
  const getItemPrice = (item) => {
    // Th·ª≠ nhi·ªÅu field kh√°c nhau theo th·ª© t·ª± ∆∞u ti√™n
    const priceFields = [
      'unitPrice',        // Field ch√≠nh t·ª´ enriched API
      'price',           // Field ph·ªï bi·∫øn
      'unit_price',      // Field snake_case
      'itemPrice',       // Field c√≥ th·ªÉ c√≥
      'productPrice',    // Field t·ª´ product
      'cost',           // Field backup
      'basePrice'       // Field backup kh√°c
    ];
    
    for (const field of priceFields) {
      const value = item[field];
      if (value !== undefined && value !== null && Number(value) > 0) {
        return Number(value);
      }
    }
    
    // N·∫øu kh√¥ng c√≥ gi√° n√†o, th·ª≠ t√≠nh t·ª´ total v√† quantity
    if (item.total && item.quantity && Number(item.quantity) > 0) {
      return Number(item.total) / Number(item.quantity);
    }
    
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi√° cho item:', item);
    return 0;
  };

  // üî• H√ÄM L·∫§Y S·ªê L∆Ø·ª¢NG S·∫¢N PH·∫®M
  const getItemQuantity = (item) => {
    const qtyFields = ['quantity', 'qty', 'amount', 'count', 'num'];
    
    for (const field of qtyFields) {
      const value = item[field];
      if (value !== undefined && value !== null && Number(value) > 0) {
        return Number(value);
      }
    }
    
    return 1; // Default quantity
  };

  // üî• H√ÄM L·∫§Y T√äN S·∫¢N PH·∫®M
  const getItemName = (item) => {
    return item.productName || item.name || item.product_name || item.title || 'S·∫£n ph·∫©m kh√¥ng r√µ';
  };

  return (
    <div className="modal-overlay">
      <div className="modal-box">
        <div className="modal-header">
          <h3>
            <span className="icon">üìã</span>
            Chi ti·∫øt H√≥a ƒë∆°n
            <span className="bill-id">#{bill._id?.slice(-8) || 'N/A'}</span>
          </h3>
          <button className="close-btn" onClick={onClose}>
            <span>√ó</span>
          </button>
        </div>

        <div className="modal-content">
          {/* üî• TH√îNG TIN KH√ÅCH H√ÄNG V√Ä ƒê∆†N H√ÄNG */}
          <div className="info-section">
            <h4>
              <span className="icon">üë§</span>
              Th√¥ng tin kh√°ch h√†ng & ƒë∆°n h√†ng
            </h4>
            <div className="info-grid">
              <div className="info-card customer-card">
                <h5>üë§ Kh√°ch h√†ng ƒë·∫∑t h√†ng</h5>
                <div className="info-item">
                  <span className="label">T√™n kh√°ch h√†ng:</span>
                  <span className="value">{customerInfo.name}</span>
                </div>
                {customerInfo.phone && (
                  <div className="info-item">
                    <span className="label">S·ªë ƒëi·ªán tho·∫°i:</span>
                    <a href={`tel:${customerInfo.phone}`} className="value phone-link">
                      üìû {customerInfo.phone}
                    </a>
                  </div>
                )}
                <div className="info-item">
                  <span className="label">ƒê·ªãa ch·ªâ:</span>
                  <span className="value">{customerInfo.address}</span>
                </div>
              </div>

              <div className="info-card delivery-card">
                <h5>üì¶ Th√¥ng tin giao h√†ng</h5>
                <div className="info-item">
                  <span className="label">Ng∆∞·ªùi nh·∫≠n:</span>
                  <span className="value">{deliveryInfo.name}</span>
                </div>
                {deliveryInfo.phone !== 'Ch∆∞a c√≥ SƒêT' && (
                  <div className="info-item">
                    <span className="label">SƒêT ng∆∞·ªùi nh·∫≠n:</span>
                    <a href={`tel:${deliveryInfo.phone}`} className="value phone-link">
                      üìû {deliveryInfo.phone}
                    </a>
                  </div>
                )}
                <div className="info-item">
                  <span className="label">ƒê·ªãa ch·ªâ giao h√†ng:</span>
                  <span className="value">{deliveryInfo.address}</span>
                </div>
              </div>

              <div className="info-card order-card">
                <h5>üìã Th√¥ng tin ƒë∆°n h√†ng</h5>
                <div className="info-item">
                  <span className="label">Tr·∫°ng th√°i:</span>
                  <span className="value status-value">{orderInfo.status}</span>
                </div>
                <div className="info-item">
                  <span className="label">Ng√†y t·∫°o:</span>
                  <span className="value">{orderInfo.createdDate}</span>
                </div>
                {orderInfo.updatedDate && (
                  <div className="info-item">
                    <span className="label">C·∫≠p nh·∫≠t cu·ªëi:</span>
                    <span className="value">{orderInfo.updatedDate}</span>
                  </div>
                )}
              </div>

              <div className="info-card payment-card">
                <h5>üí≥ Thanh to√°n & v·∫≠n chuy·ªÉn</h5>
                <div className="info-item">
                  <span className="label">Ph∆∞∆°ng th·ª©c giao h√†ng:</span>
                  <span className="value">{orderInfo.shippingMethod}</span>
                </div>
                <div className="info-item">
                  <span className="label">Ph∆∞∆°ng th·ª©c thanh to√°n:</span>
                  <span className="value">{orderInfo.paymentMethod}</span>
                </div>
                <div className="info-item">
                  <span className="label">M√£ voucher:</span>
                  <span className="value voucher-code">{orderInfo.voucherCode}</span>
                  {financialInfo.discountAmount > 0 && (
                    <span className="discount-badge">
                      Gi·∫£m: {financialInfo.discount_formatted}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* üî• DANH S√ÅCH S·∫¢N PH·∫®M - FIXED PRICING */}
          <div className="items-section">
            <h4>
              <span className="icon">üì¶</span>
              Danh s√°ch s·∫£n ph·∫©m ({items.length} m√≥n)
            </h4>
            <div className="table-container">
              <table>
                <thead>
                  <tr>
                    <th>#</th>
                    <th>T√™n s·∫£n ph·∫©m</th>
                    <th>ƒê∆°n gi√°</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>Th√†nh ti·ªÅn</th>
                  </tr>
                </thead>
                <tbody>
                  {items.length > 0 ? items.map((item, i) => {
                    const itemPrice = getItemPrice(item);
                    const itemQty = getItemQuantity(item);
                    const itemName = getItemName(item);
                    const itemTotal = itemPrice * itemQty;
                    
                    // Debug log cho t·ª´ng item
                    console.log(`üîç Item ${i + 1} details:`, {
                      name: itemName,
                      price: itemPrice,
                      qty: itemQty,
                      total: itemTotal,
                      originalData: item
                    });
                    
                    return (
                      <tr key={i}>
                        <td>
                          <span className="row-number">{i + 1}</span>
                        </td>
                        <td className="product-name">
                          <div className="product-info">
                            <span className="name">{itemName}</span>
                            {item.productId && (
                              <span className="product-id">ID: {item.productId}</span>
                            )}
                            {itemPrice === 0 && (
                              <span className="price-warning">‚ö†Ô∏è Kh√¥ng c√≥ gi√°</span>
                            )}
                            {/* Debug info */}
                            <small style={{color: '#888', fontSize: '11px'}}>
                              Fields: {Object.keys(item).join(', ')}
                            </small>
                          </div>
                        </td>
                        <td className="unit-price">
                          <span className={itemPrice === 0 ? 'price-error' : 'price-normal'}>
                            {itemPrice.toLocaleString('vi-VN')} ƒë
                          </span>
                        </td>
                        <td className="quantity">
                          <span className="qty-badge">{itemQty}</span>
                        </td>
                        <td className="total-price">
                          <strong>{itemTotal.toLocaleString('vi-VN')} ƒë</strong>
                        </td>
                      </tr>
                    );
                  }) : (
                    <tr>
                      <td colSpan="5" className="no-items">
                        <span>üì≠ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong ƒë∆°n h√†ng</span>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          {/* üî• BREAKDOWN T√ÄI CH√çNH CHI TI·∫æT */}
          <div className="financial-section">
            <h4>
              <span className="icon">üí∞</span>
              Chi ti·∫øt thanh to√°n
            </h4>
            <div className="financial-breakdown">
              <div className="financial-card">
                <div className="breakdown-item">
                  <span className="label">üí∞ Ti·ªÅn h√†ng:</span>
                  <span className="value">{financialInfo.subtotal_formatted}</span>
                </div>
                
                <div className="breakdown-item">
                  <span className="label">üöö Ph√≠ v·∫≠n chuy·ªÉn:</span>
                  <span className="value">{financialInfo.shipping_fee_formatted}</span>
                </div>

                {financialInfo.discountAmount > 0 && (
                  <div className="breakdown-item discount-item">
                    <span className="label">üí∏ Gi·∫£m gi√°:</span>
                    <span className="value discount-value">-{financialInfo.discount_formatted}</span>
                  </div>
                )}

                <div className="breakdown-divider"></div>

                <div className="breakdown-item total-item">
                  <span className="label">üíµ T·ªîNG THANH TO√ÅN:</span>
                  <span className="value total-value">{financialInfo.total_formatted}</span>
                </div>

                {/* Hi·ªÉn th·ªã t√≠nh to√°n chi ti·∫øt */}
                <div className="calculation-detail">
                  <small>
                    T√≠nh to√°n: {financialInfo.subtotal_formatted} + {financialInfo.shipping_fee_formatted}
                    {financialInfo.discountAmount > 0 && ` - ${financialInfo.discount_formatted}`}
                    {' = '}{financialInfo.total_formatted}
                  </small>
                </div>
              </div>
            </div>
          </div>

          {/* üî• L·ªäCH S·ª¨ TR·∫†NG TH√ÅI (n·∫øu c√≥) */}
          {statusHistory.length > 0 && (
            <div className="history-section">
              <h4>
                <span className="icon">üìã</span>
                L·ªãch s·ª≠ tr·∫°ng th√°i
              </h4>
              <div className="status-timeline">
                {statusHistory.map((status, i) => (
                  <div key={i} className="timeline-item">
                    <div className="timeline-dot"></div>
                    <div className="timeline-content">
                      <span className="status-text">{status.status}</span>
                      <span className="status-time">{new Date(status.timestamp).toLocaleString('vi-VN')}</span>
                      {status.note && <span className="status-note">{status.note}</span>}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* üî• ACTIONS */}
          <div className="actions">
            <button className="btn-print" onClick={onPrint}>
              <span className="icon">üñ®Ô∏è</span>
              <span>In h√≥a ƒë∆°n PDF</span>
            </button>
            
            <button className="btn-copy" onClick={() => {
              const info = `H√≥a ƒë∆°n #${bill._id?.slice(-8) || 'N/A'}\n` +
                         `Kh√°ch h√†ng: ${customerInfo.name} - ${customerInfo.phone}\n` +
                         `Ng∆∞·ªùi nh·∫≠n: ${deliveryInfo.name} - ${deliveryInfo.phone}\n` +
                         `ƒê·ªãa ch·ªâ: ${deliveryInfo.address}\n` +
                         `T·ªïng ti·ªÅn: ${financialInfo.total_formatted}\n` +
                         `Tr·∫°ng th√°i: ${orderInfo.status}\n` +
                         `Ng√†y t·∫°o: ${orderInfo.createdDate}`;
              navigator.clipboard.writeText(info);
              alert('üìã ƒê√£ copy th√¥ng tin h√≥a ƒë∆°n!');
            }}>
              <span className="icon">üìã</span>
              <span>Copy th√¥ng tin</span>
            </button>
            
            <button className="btn-close" onClick={onClose}>
              <span className="icon">‚úï</span>
              <span>ƒê√≥ng</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BillDetailModal;
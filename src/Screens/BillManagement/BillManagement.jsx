// üîí PHI√äN B·∫¢N ƒê√É S·ª¨A L·ªñI REDIRECT - T∆Ø∆†NG TH√çCH NG∆Ø·ª¢C
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom'; // ‚úÖ TH√äM useNavigate
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './BillManagement.scss';
import TabBarr from '../../component/tabbar/TabBar.jsx';
import api from '../../utils/api.js';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import RobotoRegular from '../../fonts/RobotoRegular.js';
import { ENUM_PAGE } from '../../component/ENUM/enum.ts'; // ‚úÖ TH√äM import ENUM_PAGE

import StatusBadge from '../../component/StatusBadge.jsx';
import BillDetailModal from '../../component/BillDetailModal.jsx';

// üéØ CH·ªà QU·∫¢N L√ù C√ÅC TR·∫†NG TH√ÅI TR∆Ø·ªöC KHI GIAO H√ÄNG
const BILL_STATUS = {
  PENDING: 'pending',      
  CONFIRMED: 'confirmed',  
  READY: 'ready',         
  CANCELLED: 'cancelled', 
};

// Mapping hi·ªÉn th·ªã tr·∫°ng th√°i ti·∫øng Vi·ªát
const STATUS_LABELS = {
  [BILL_STATUS.PENDING]: 'Ch·ªù x√°c nh·∫≠n',
  [BILL_STATUS.CONFIRMED]: 'ƒê√£ x√°c nh·∫≠n',
  [BILL_STATUS.READY]: 'S·∫µn s√†ng giao',
  [BILL_STATUS.CANCELLED]: 'ƒê√£ h·ªßy',
};

// Logic chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i cho ph√©p
const ALLOWED_TRANSITIONS = {
  [BILL_STATUS.PENDING]: [BILL_STATUS.CONFIRMED, BILL_STATUS.CANCELLED],
  [BILL_STATUS.CONFIRMED]: [BILL_STATUS.READY, BILL_STATUS.CANCELLED],
  [BILL_STATUS.READY]: [BILL_STATUS.CANCELLED], 
  [BILL_STATUS.CANCELLED]: [], 
};

// M√†u s·∫Øc cho t·ª´ng tr·∫°ng th√°i
const STATUS_COLORS = {
  [BILL_STATUS.PENDING]: '#f59e0b',      
  [BILL_STATUS.CONFIRMED]: '#3b82f6',    
  [BILL_STATUS.READY]: '#8b5cf6',        
  [BILL_STATUS.CANCELLED]: '#ef4444',    
};

// ‚úÖ PH√ÇN QUY·ªÄN ƒê∆†N GI·∫¢N (KH√îNG C·∫¶N THAY ƒê·ªîI DATABASE)
const getUserRole = () => {
  try {
    const token = localStorage.getItem('token');
    if (token) {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.role || 'staff';
    }
  } catch (e) {
    console.error('Error getting user role:', e);
  }
  return 'staff';
};

const getCurrentUserName = () => {
  try {
    const token = localStorage.getItem('token');
    if (token) {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.username || payload.name || 'Unknown User';
    }
  } catch (e) {
    console.error('Error getting username:', e);
  }
  return 'Unknown User';
};

// ‚úÖ KI·ªÇM TRA TOKEN H·ª¢P L·ªÜ NH∆ØNG KH√îNG QU√Å STRICT
const checkTokenValidity = () => {
  const token = localStorage.getItem('token');
  if (!token) return false;

  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const currentTime = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = payload.exp - currentTime;
    
    // ‚ö†Ô∏è Ch·ªâ c·∫£nh b√°o, kh√¥ng block action
    if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {
      console.warn('üïê Token s·∫Ω h·∫øt h·∫°n trong', Math.floor(timeUntilExpiry / 60), 'ph√∫t');
    }
    
    return timeUntilExpiry > 0;
  } catch (e) {
    console.error('‚ùå Token validation error:', e);
    return false;
  }
};

// ‚úÖ HANDLE AUTHENTICATION ERRORS - NH∆ØNG KH√îNG QU√Å AGGRESSIVE
const handleAuthError = (error) => {
  if (error.response && (error.response.status === 401 || error.response.status === 403)) {
    console.error('üö® Authentication failed');
    localStorage.removeItem('token');
    alert('‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    window.location.href = '/';
    return true;
  }
  return false;
};

const BillManagement = () => {
  const navigate = useNavigate(); // ‚úÖ TH√äM useNavigate hook
  const [bills, setBills] = useState([]);
  const [vouchers, setVouchers] = useState([]); // Gi·ªØ vouchers cho discount_percent trong modal
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [fromDate, setFromDate] = useState(null);
  const [toDate, setToDate] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [currentBill, setCurrentBill] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [userRole, setUserRole] = useState('staff');
  const [userName, setUserName] = useState('');
  const [actionHistory, setActionHistory] = useState([]);

  // ‚úÖ LO·∫†I B·ªé Token validity checker aggressive
  useEffect(() => {
    console.log('=== BILL MANAGEMENT DEBUG ===');
    
    // ‚úÖ Ki·ªÉm tra token c∆° b·∫£n
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('üö® Kh√¥ng c√≥ token - redirect to login');
      window.location.href = '/';
      return;
    }
    
    // ‚úÖ L·∫•y th√¥ng tin user
    setUserRole(getUserRole());
    setUserName(getCurrentUserName());
    
    console.log('‚úÖ Token exists - fetching data...');
    fetchAll();
  }, []);

  // ‚úÖ LOG ACTION LOCALLY
  const logAction = (action, billId, details = '') => {
    const logEntry = {
      id: Date.now(),
      timestamp: new Date().toISOString(),
      user: userName,
      role: userRole,
      action,
      billId: billId?.slice(-8) || 'N/A',
      details,
      ip: 'N/A'
    };
    
    const existingLogs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
    const updatedLogs = [logEntry, ...existingLogs].slice(0, 100);
    localStorage.setItem('bill_action_logs', JSON.stringify(updatedLogs));
    
    setActionHistory(updatedLogs);
    console.log('üìù Action logged:', logEntry);
  };

  function fetchAll() {
    console.log('üìä Starting fetchAll...');
    setLoading(true);
    setError(null);
    
    // üî• S·ª¨A: Ch·ªâ fetch bills enrich v√† vouchers (b·ªè users, addresses)
    Promise.all([
      api.get('/GetAllBills?enrich=true'),
      api.get('/vouchers')
    ]).then(([billsRes, vouchersRes]) => {
      
      console.log('üìä API Results:');
      console.log('üìã Bills:', billsRes.data.data?.length || 0);
      console.log('üé´ Vouchers:', vouchersRes.data.data?.length || 0);
      
      const billData = billsRes.data.data || [];
      
      console.log('üîç Sample bill data:', billData[0]);
      
      const managementBills = billData.filter(bill => 
        ['pending', 'confirmed', 'ready', 'cancelled'].includes(bill.status)
      );
      
      setBills(managementBills);
      setVouchers(vouchersRes.data.data || []);

      const existingLogs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
      setActionHistory(existingLogs);

      const criticalErrors = [];
      if (!billsRes.data.success) criticalErrors.push('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h√≥a ƒë∆°n');
      
      if (criticalErrors.length > 0) {
        setError(criticalErrors.join(', '));
        console.error('‚ùå Critical errors:', criticalErrors);
      }

      const warnings = [];
      if (!vouchersRes.data.success) warnings.push('Kh√¥ng th·ªÉ t·∫£i voucher - s·∫Ω hi·ªÉn th·ªã "‚Äî"');
      
      if (warnings.length > 0) {
        console.warn('‚ö†Ô∏è Non-critical warnings:', warnings);
      }

      setLoading(false);
    }).catch(error => {
      console.error('‚ùå fetchAll error:', error);
      setError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + (error.response?.data?.msg || error.message));
      setLoading(false);
    });
  }

  // üî• S·ª¨A: S·ª≠ d·ª•ng enriched fields t·ª´ backend
  const lookupUser = (bill) => bill.customerName || 'Kh√°ch h√†ng kh√¥ng r√µ';

  const lookupAddress = (bill) => bill.addressString || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ';

  const lookupVoucher = bill => bill.voucherDisplayCode || '‚Äî';

  // Filter h√≥a ƒë∆°n
  const filtered = bills.filter(bill => {
    if (filterStatus !== 'all' && bill.status !== filterStatus) {
      return false;
    }
    if (searchTerm) {
      const customerName = lookupUser(bill).toLowerCase();
      const billId = (bill._id || '').toLowerCase();
      const searchLower = searchTerm.toLowerCase();
      if (!customerName.includes(searchLower) && !billId.includes(searchLower)) {
        return false;
      }
    }
    if (bill.created_at) {
      const d = new Date(bill.created_at);
      if (fromDate && d < fromDate) return false;
      if (toDate && d > toDate) return false;
    }
    return true;
  });

  // ‚úÖ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI KH√îNG QU√Å STRICT
  const updateBillStatus = async (billId, newStatus) => {
    const bill = bills.find(b => b._id === billId);
    if (!bill) return;

    // ‚úÖ KI·ªÇM TRA QUY·ªÄN H·∫†N
    if (userRole === 'staff' && newStatus === BILL_STATUS.CANCELLED) {
      alert('‚ùå Staff kh√¥ng c√≥ quy·ªÅn h·ªßy h√≥a ƒë∆°n. Vui l√≤ng li√™n h·ªá Manager/Admin.');
      return;
    }

    // ‚úÖ Y√äU C·∫¶U L√ù DO CHO H√ÄNH ƒê·ªòNG QUAN TR·ªåNG
    let reason = '';
    if (newStatus === BILL_STATUS.CANCELLED) {
      reason = prompt('üìù Vui l√≤ng nh·∫≠p l√Ω do h·ªßy h√≥a ƒë∆°n (b·∫Øt bu·ªôc):');
      if (!reason || reason.trim() === '') {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p l√Ω do h·ªßy h√≥a ƒë∆°n');
        return;
      }
    }

    const confirmMessage = newStatus === BILL_STATUS.CANCELLED 
      ? `‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën H·ª¶Y h√≥a ƒë∆°n n√†y?\n\nL√Ω do: ${reason}\n\nH√†nh ƒë·ªông n√†y s·∫Ω ƒë∆∞·ª£c ghi l·∫°i trong h·ªá th·ªëng.`
      : `‚úÖ X√°c nh·∫≠n chuy·ªÉn tr·∫°ng th√°i th√†nh: ${STATUS_LABELS[newStatus]}?`;

    if (!window.confirm(confirmMessage)) return;

    try {
      await api.put(`/bills/${billId}`, { 
        status: newStatus
      });

      logAction(
        `STATUS_CHANGE: ${bill.status} ‚Üí ${newStatus}`,
        billId,
        reason ? `L√Ω do: ${reason}` : ''
      );

      const statusEmoji = {
        [BILL_STATUS.CONFIRMED]: '‚úÖ',
        [BILL_STATUS.READY]: 'üì¶',
        [BILL_STATUS.CANCELLED]: '‚ùå',
      };

      alert(`${statusEmoji[newStatus]} ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh: ${STATUS_LABELS[newStatus]}`);
      fetchAll();
    } catch (err) {
      if (!handleAuthError(err)) {
        console.error('‚ùå Update status error:', err);
        alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n: ' + (err.response?.data?.message || err.message));
      }
    }
  };

  // ‚úÖ FIXED - X·ª¨ L√ù CHUY·ªÇN GIAO H√ÄNG V·ªöI NAVIGATE THAY V√å WINDOW.LOCATION
  const moveToShipment = (bill) => {
    const confirmMessage = `üöö Chuy·ªÉn ƒë·∫øn m√†n qu·∫£n l√Ω giao h√†ng?\n\n` +
      `üìã M√£ ƒë∆°n: ${bill._id.slice(-8)}\n` +
      `üë§ Kh√°ch h√†ng: ${lookupUser(bill)}\n` +
      `üìç ƒê·ªãa ch·ªâ: ${lookupAddress(bill)}\n\n` +
      `B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn m√†n h√¨nh qu·∫£n l√Ω giao h√†ng.`;

    if (!window.confirm(confirmMessage)) return;

    try {
      // ‚úÖ Log action tr∆∞·ªõc khi chuy·ªÉn trang
      logAction('MOVE_TO_SHIPPING', bill._id, 'Chuy·ªÉn sang m√†n qu·∫£n l√Ω giao h√†ng');
      
      // ‚úÖ L∆∞u th√¥ng tin bill v√†o localStorage
      localStorage.setItem('selected_bill_for_shipping', JSON.stringify({
        id: bill._id,
        customer: lookupUser(bill),
        address: lookupAddress(bill),
        total: bill.total,
        timestamp: new Date().toISOString()
      }));

      console.log('üöö Navigating to ShipmentManagement using React Router...');
      
      // ‚úÖ S·ª¨ D·ª§NG REACT ROUTER NAVIGATE THAY V√å WINDOW.LOCATION
      navigate(ENUM_PAGE.ShipmentManagement);
      
    } catch (err) {
      console.error('‚ùå Move to shipping error:', err);
      
      // ‚úÖ FALLBACK v·ªõi th√¥ng b√°o chi ti·∫øt h∆°n
      alert('‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn m√†n qu·∫£n l√Ω giao h√†ng.\n\n' +
            'üîß C√≥ th·ªÉ do:\n' +
            '1. Route ShipmentManagement ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng\n' +
            '2. V·∫•n ƒë·ªÅ v·ªõi React Router\n\n' +
            'üëâ Th·ª≠ navigate th·ªß c√¥ng ho·∫∑c refresh trang');
      
      logAction('SHIPPING_REDIRECT_FAILED', bill._id, `Error: ${err.message}`);
    }
  };

  const canTransitionTo = (currentStatus, targetStatus) => {
    return ALLOWED_TRANSITIONS[currentStatus]?.includes(targetStatus) || false;
  };

  const openModal = async bill => {
    try {
      console.log('üîç Fetching bill details for:', bill._id);
      const { data: res } = await api.get(`/bills/${bill._id}?enrich=true&_=${Date.now()}`);
      
      if (!res || !res.data) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n');
      }
      
      const billData = res.data;
      console.log('üìã Bill data received:', billData);
      
      const items = Array.isArray(billData.items) ? billData.items : [];
      
      const subtotal = items.reduce((sum, item) => {
        const price = Number(item?.unitPrice || 0);
        const qty = Number(item?.quantity || 0);
        return sum + (price * qty);
      }, 0);
      
      const v = vouchers.find(v => v._id === billData.voucher_id);
      const discountPercent = Number(v?.discount_percent || 0);
      const discountAmount = Math.round(subtotal * discountPercent / 100);
      const finalTotal = subtotal - discountAmount;
      
      const userName = billData.customerName || lookupUser(billData);
      const addressStr = billData.addressString || lookupAddress(billData);
      const voucherCode = billData.voucherDisplayCode || lookupVoucher(billData);

      setCurrentBill({
        ...billData,
        items,
        userName,
        addressStr,
        voucherCode,
        subtotal,
        discountAmount,
        finalTotal
      });
      setShowModal(true);

      logAction('VIEW_DETAIL', bill._id, `Xem chi ti·∫øt h√≥a ƒë∆°n`);
    } catch (err) {
      console.error('‚ùå Error opening modal:', err);
      alert('‚ùå Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt h√≥a ƒë∆°n: ' + (err.response?.data?.msg || err.message));
    }
  };

  const printBillSlip = async billId => {
    try {
      console.log('üñ®Ô∏è Printing PDF for bill:', billId);
      const { data: res } = await api.get(`/bills/${billId}?enrich=true&_=${Date.now()}`);
      
      if (!res || !res.data) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n');
      }
      
      const bill = res.data;
      console.log('üìÑ PDF data:', bill);
      
      const items = Array.isArray(bill.items) ? bill.items : [];
      
      const subtotal = items.reduce((sum, item) => {
        const price = Number(item?.unitPrice || 0);
        const qty = Number(item?.quantity || 0);
        return sum + (price * qty);
      }, 0);
      
      const v = vouchers.find(v => v._id === bill.voucher_id);
      const discountAmount = Math.round(subtotal * ((Number(v?.discount_percent) || 0) / 100));
      const finalTotal = subtotal - discountAmount;
      const customer = bill.customerName || 'Kh√°ch h√†ng kh√¥ng r√µ';
      const addressText = bill.addressString || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ';
      const voucherCode = bill.voucherDisplayCode || '‚Äî';

      const doc = new jsPDF({ putOnlyUsedFonts: true, compress: true });
      doc.addFileToVFS('Roboto-Regular.ttf', RobotoRegular);
      doc.addFont('Roboto-Regular.ttf', 'Roboto', 'normal');
      doc.setFont('Roboto', 'normal');
      
      doc.setFontSize(16);
      doc.text('üßÅ CAKESHOP - H√ìA ƒê∆†N', 14, 20);
      
      doc.setFontSize(12);
      doc.text(`üìÑ M√£ h√≥a ƒë∆°n: ${bill._id}`, 14, 30);
      doc.text(`üë§ Kh√°ch h√†ng: ${customer}`, 14, 36);
      doc.text(`üìç ƒê·ªãa ch·ªâ: ${addressText}`, 14, 42);
      doc.text(`üìä Tr·∫°ng th√°i: ${bill.statusDisplay || STATUS_LABELS[bill.status] || bill.status}`, 14, 48);
      doc.text(`üé´ Voucher: ${voucherCode}`, 14, 54);
      doc.text(`üìÖ Ng√†y t·∫°o: ${bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleString('vi-VN') : 'N/A')}`, 14, 60);
      
      if (discountAmount > 0) {
        doc.text(`üí∞ Gi·∫£m gi√°: -${discountAmount.toLocaleString('vi-VN')} ƒë`, 14, 66);
      }
      
      const startY = discountAmount > 0 ? 72 : 66;
      const tableData = items.map((item, i) => [
        i + 1,
        item?.productName || item?.name || 'S·∫£n ph·∫©m kh√¥ng r√µ',
        Number(item?.quantity || 0),
        (Number(item?.unitPrice || 0)).toLocaleString('vi-VN') + ' ƒë',
        ((Number(item?.quantity || 0)) * (Number(item?.unitPrice || 0))).toLocaleString('vi-VN') + ' ƒë'
      ]);
      
      autoTable(doc, {
        head: [['#', 'T√™n s·∫£n ph·∫©m', 'SL', 'ƒê∆°n gi√°', 'Th√†nh ti·ªÅn']],
        body: tableData,
        startY,
        styles: {
          font: 'Roboto',
          fontStyle: 'normal',
          fontSize: 10,
          cellPadding: 3
        },
        headStyles: {
          fillColor: [41, 128, 185],
          font: 'Roboto',
          fontStyle: 'normal'
        }
      });
      
      const yAfterTable = doc.lastAutoTable.finalY + 10;
      doc.setFontSize(12);
      doc.text(`üíµ T·∫°m t√≠nh: ${subtotal.toLocaleString('vi-VN')} ƒë`, 14, yAfterTable);
      doc.text(`üí≥ T·ªïng thanh to√°n: ${bill.total_formatted || finalTotal.toLocaleString('vi-VN')} ƒë`, 14, yAfterTable + 6);
      
      doc.setFontSize(10);
      doc.text('C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng CakeShop! üéÇ', 14, yAfterTable + 20);
      
      doc.save(`HoaDon_${bill._id.slice(-8)}_${STATUS_LABELS[bill.status] || bill.status}.pdf`);

      logAction('PRINT_PDF', billId, `In h√≥a ƒë∆°n PDF`);
    } catch (err) {
      console.error('‚ùå PDF Error:', err);
      alert('‚ùå Kh√¥ng th·ªÉ t·∫°o PDF: ' + (err.response?.data?.msg || err.message));
    }
  };

  const hideBill = async billId => {
    if (userRole !== 'admin') {
      alert('‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ·∫©n h√≥a ƒë∆°n');
      return;
    }

    const reason = prompt('üìù Vui l√≤ng nh·∫≠p l√Ω do ·∫©n h√≥a ƒë∆°n (b·∫Øt bu·ªôc):');
    if (!reason || reason.trim() === '') {
      alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p l√Ω do ·∫©n h√≥a ƒë∆°n');
      return;
    }

    if (!window.confirm(`‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën ·∫®N h√≥a ƒë∆°n n√†y?\n\nL√Ω do: ${reason}\n\nH√≥a ƒë∆°n s·∫Ω kh√¥ng hi·ªÉn th·ªã trong danh s√°ch nh∆∞ng v·∫´n c√≤n trong database.`)) return;

    try {
      await api.put(`/bills/${billId}`, { 
        status: 'hidden',
        hidden_reason: reason,
        hidden_by: userName,
        hidden_at: new Date().toISOString()
      });

      logAction('HIDE_BILL', billId, `·∫®n h√≥a ƒë∆°n. L√Ω do: ${reason}`);
      
      alert('‚úÖ ƒê√£ ·∫©n h√≥a ƒë∆°n.');
      fetchAll();
    } catch (err) {
      console.error(err);
      if (window.confirm('‚ö†Ô∏è Backend ch∆∞a h·ªó tr·ª£ ·∫©n h√≥a ƒë∆°n. B·∫°n c√≥ mu·ªën X√ìA Vƒ®NH VI·ªÑN kh√¥ng?\n\n‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y c√≥ th·ªÉ t·∫°o ra r·ªßi ro b·∫£o m·∫≠t!')) {
        try {
          await api.delete(`/bills/${billId}`);
          
          logAction('DELETE_BILL', billId, `‚ö†Ô∏è X√ìA Vƒ®NH VI·ªÑN - L√Ω do: ${reason} - C·∫¢NH B√ÅO: C√≥ th·ªÉ m·∫•t d·∫•u v·∫øt`);
          
          alert('‚ö†Ô∏è ƒê√£ x√≥a h√≥a ƒë∆°n (kh√¥ng khuy·∫øn kh√≠ch).');
          fetchAll();
        } catch (deleteErr) {
          alert('‚ùå Kh√¥ng th·ªÉ x√≥a h√≥a ƒë∆°n: ' + deleteErr.message);
        }
      }
    }
  };

  // ‚úÖ XEM L·ªäCH S·ª¨ THAO T√ÅC
  const viewActionHistory = () => {
    const logs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
    const logsText = logs.map(log => 
      `${new Date(log.timestamp).toLocaleString('vi-VN')} | ${log.user} (${log.role}) | ${log.action} | Bill: ${log.billId} | ${log.details}`
    ).join('\n');
    
    if (logs.length === 0) {
      alert('üìù Ch∆∞a c√≥ l·ªãch s·ª≠ thao t√°c n√†o.');
      return;
    }
    
    const logWindow = window.open('', 'ActionLogs', 'width=800,height=600');
    logWindow.document.write(`
      <html>
        <head>
          <title>L·ªãch s·ª≠ thao t√°c - Bill Management</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h2 { color: #667eea; }
            pre { background: #f5f5f5; padding: 15px; border-radius: 8px; font-size: 12px; overflow-x: auto; }
            .clear-btn { background: #ef4444; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
          </style>
        </head>
        <body>
          <h2>üìú L·ªãch s·ª≠ thao t√°c h·ªá th·ªëng</h2>
          <p>T·ªïng c·ªông: ${logs.length} thao t√°c</p>
          <button class="clear-btn" onclick="if(confirm('X√≥a to√†n b·ªô l·ªãch s·ª≠?')) { localStorage.removeItem('bill_action_logs'); alert('ƒê√£ x√≥a l·ªãch s·ª≠!'); window.close(); }">üóëÔ∏è X√≥a l·ªãch s·ª≠</button>
          <pre>${logsText}</pre>
        </body>
      </html>
    `);
  };

  // Render action buttons cho t·ª´ng tr·∫°ng th√°i
  const renderActionButtons = (bill) => {
    const currentStatus = bill.status;
    const allowedNextStates = ALLOWED_TRANSITIONS[currentStatus] || [];

    return (
      <td className="actions-cell">
        <div className="action-buttons">
          <button onClick={() => openModal(bill)} className="btn-detail">
            üëÅÔ∏è Chi ti·∫øt
          </button>
          <button onClick={() => printBillSlip(bill._id)} className="btn-print">
            üñ®Ô∏è In PDF
          </button>
          
          {(userRole === 'manager' || userRole === 'admin') && (
            <button onClick={viewActionHistory} className="btn-audit">
              üìú L·ªãch s·ª≠
            </button>
          )}
          
          {allowedNextStates.map(nextStatus => {
            if (nextStatus === BILL_STATUS.CANCELLED && userRole === 'staff') {
              return null;
            }
            
            return (
              <button
                key={nextStatus}
                onClick={() => updateBillStatus(bill._id, nextStatus)}
                className={`btn-status btn-${nextStatus}`}
                title={`Chuy·ªÉn sang: ${STATUS_LABELS[nextStatus]} ${nextStatus === BILL_STATUS.CANCELLED && userRole === 'staff' ? '(Kh√¥ng c√≥ quy·ªÅn)' : ''}`}
                style={{ backgroundColor: STATUS_COLORS[nextStatus] }}
              >
                {getStatusButtonLabel(nextStatus)}
              </button>
            );
          })}
          
          {currentStatus === BILL_STATUS.READY && (
            <button
              onClick={() => moveToShipment(bill)}
              className="btn-move-to-shipping"
              title="Chuy·ªÉn sang m√†n qu·∫£n l√Ω giao h√†ng"
              style={{ backgroundColor: '#06b6d4' }}
            >
              üöö Chuy·ªÉn giao h√†ng
            </button>
          )}
          
          {[BILL_STATUS.PENDING, BILL_STATUS.CANCELLED].includes(currentStatus) && userRole === 'admin' && (
            <button onClick={() => hideBill(bill._id)} className="btn-hide">
              üëÅÔ∏è‚Äçüó®Ô∏è ·∫®n
            </button>
          )}
        </div>
      </td>
    );
  };

  const getStatusButtonLabel = (status) => {
    const labels = {
      [BILL_STATUS.CONFIRMED]: '‚úÖ X√°c nh·∫≠n',
      [BILL_STATUS.READY]: 'üì¶ Chu·∫©n b·ªã xong',
      [BILL_STATUS.CANCELLED]: '‚ùå H·ªßy ƒë∆°n',
    };
    return labels[status] || STATUS_LABELS[status];
  };

  // Loading v√† error states
  if (loading) {
    return (
      <div className="bill-management">
        <TabBarr />
        <div style={{ textAlign: 'center', padding: '100px' }}>
          <span style={{ fontSize: '48px' }}>‚è≥</span>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          <small style={{ color: '#718096' }}>
            ƒêang ki·ªÉm tra token v√† t·∫£i d·ªØ li·ªáu...
          </small>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bill-management">
        <TabBarr />
        <div style={{ textAlign: 'center', padding: '100px' }}>
          <span style={{ fontSize: '48px' }}>‚ùå</span>
          <p style={{ color: '#ef4444', fontSize: '18px' }}>{error}</p>
          <button onClick={fetchAll} style={{ 
            padding: '12px 24px', 
            background: '#667eea', 
            color: 'white', 
            border: 'none', 
            borderRadius: '8px',
            cursor: 'pointer',
            marginTop: '20px'
          }}>
            üîÑ Th·ª≠ l·∫°i
          </button>
          <br />
          <small style={{ color: '#718096', marginTop: '10px', display: 'block' }}>
            N·∫øu l·ªói li√™n t·ª•c x·∫£y ra, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c ƒëƒÉng nh·∫≠p l·∫°i
          </small>
        </div>
      </div>
    );
  }

  return (
    <div className="bill-management">
      <TabBarr />
      
      <div className="management-header">
        <div className="header-icon">
          <span style={{ fontSize: '48px' }}>üìã</span>
        </div>
        <div className="header-content">
          <h2>Qu·∫£n l√Ω ƒê∆°n h√†ng</h2>
          <p>X·ª≠ l√Ω ƒë∆°n h√†ng t·ª´ khi ƒë·∫∑t h√†ng ƒë·∫øn s·∫µn s√†ng giao</p>
          
          <div className="user-info-badge" style={{
            marginTop: '10px',
            padding: '8px 15px',
            background: 'rgba(102, 126, 234, 0.1)',
            borderRadius: '20px',
            fontSize: '14px',
            color: '#667eea'
          }}>
            üë§ <strong>{userName}</strong> | 
            üè∑Ô∏è <strong>{userRole.toUpperCase()}</strong> | 
            üìä <strong>{actionHistory.length}</strong> thao t√°c ƒë√£ th·ª±c hi·ªán |
            üîê <span style={{ color: checkTokenValidity() ? '#10b981' : '#ef4444' }}>
              {checkTokenValidity() ? 'Token h·ª£p l·ªá' : 'Token h·∫øt h·∫°n'}
            </span>
          </div>
        </div>
      </div>

      <div className="filter-bar">
        <div className="filter-group">
          <label>üîç T√¨m ki·∫øm:</label>
          <input
            type="text"
            placeholder="T√™n kh√°ch h√†ng ho·∫∑c m√£ h√≥a ƒë∆°n..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="filter-group">
          <label>üìä Tr·∫°ng th√°i:</label>
          <select value={filterStatus} onChange={e => setFilterStatus(e.target.value)}>
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            {Object.entries(STATUS_LABELS).map(([status, label]) => (
              <option key={status} value={status}>{label}</option>
            ))}
          </select>
        </div>

        <div className="filter-group">
          <label>üìÖ T·ª´ ng√†y:</label>
          <DatePicker
            selected={fromDate}
            onChange={setFromDate}
            placeholderText="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
            dateFormat="dd/MM/yyyy"
          />
        </div>
        
        <div className="filter-group">
          <label>üìÖ ƒê·∫øn ng√†y:</label>
          <DatePicker
            selected={toDate}
            onChange={setToDate}
            placeholderText="Ch·ªçn ng√†y k·∫øt th√∫c"
            dateFormat="dd/MM/yyyy"
          />
        </div>
        
        <button onClick={fetchAll} className="filter-btn">üîÑ L√†m m·ªõi</button>
        
        {(userRole === 'manager' || userRole === 'admin') && (
          <button onClick={viewActionHistory} className="filter-btn" style={{background: '#10b981'}}>
            üìú L·ªãch s·ª≠ ({actionHistory.length})
          </button>
        )}
      </div>

      <div className="quick-stats">
        <div className="stat-card pending">
          <div className="stat-icon">‚è≥</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.PENDING).length}</span>
            <span className="stat-label">Ch·ªù x√°c nh·∫≠n</span>
          </div>
        </div>
        
        <div className="stat-card confirmed">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.CONFIRMED).length}</span>
            <span className="stat-label">ƒê√£ x√°c nh·∫≠n</span>
          </div>
        </div>
        
        <div className="stat-card ready">
          <div className="stat-icon">üì¶</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.READY).length}</span>
            <span className="stat-label">S·∫µn s√†ng giao</span>
          </div>
        </div>
        
        <div className="stat-card cancelled">
          <div className="stat-icon">‚ùå</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.CANCELLED).length}</span>
            <span className="stat-label">ƒê√£ h·ªßy</span>
          </div>
        </div>
      </div>

      <div className="table-wrapper">
        <table className="bills-table">
          <thead>
            <tr>
              <th>#</th>
              <th>üë§ Kh√°ch h√†ng</th>
              <th>üìÖ Ng√†y t·∫°o</th>
              <th>üìç ƒê·ªãa ch·ªâ</th>
              <th>üé´ Voucher</th>
              <th>üí∞ T·ªïng ti·ªÅn</th>
              <th>üìä Tr·∫°ng th√°i</th>
              <th>‚öôÔ∏è H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((bill, i) => (
              <tr key={bill._id} className={`bill-row status-${bill.status}`}>
                <td className="row-number">{i + 1}</td>
                <td className="customer-cell">
                  <div className="customer-info">
                    <span className="customer-name">{lookupUser(bill)}</span>
                    <span className="bill-id">#{(bill._id || '').slice(-8)}</span>
                  </div>
                </td>
                <td className="date-cell">
                  {bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleDateString('vi-VN') : 'N/A')}
                  <br />
                  <small>{bill.created_at ? new Date(bill.created_at).toLocaleTimeString('vi-VN') : ''}</small>
                </td>
                <td className="address-cell" title={lookupAddress(bill)}>
                  {lookupAddress(bill).length > 50 
                    ? lookupAddress(bill).substring(0, 50) + '...'
                    : lookupAddress(bill)
                  }
                </td>
                <td className="voucher-cell">{lookupVoucher(bill)}</td>
                <td className="total-cell">
                  <span className="total-amount">
                    {bill.total_formatted || (Number(bill.total) || 0).toLocaleString('vi-VN') + ' ƒë'}
                  </span>
                </td>
                <td className="status-cell">
                  <div 
                    className="status-badge" 
                    style={{ backgroundColor: STATUS_COLORS[bill.status] || '#6b7280' }}
                  >
                    {bill.statusDisplay || STATUS_LABELS[bill.status] || bill.status}
                  </div>
                </td>
                {renderActionButtons(bill)}
              </tr>
            ))}
            
            {filtered.length === 0 && (
              <tr>
                <td colSpan="8" style={{ textAlign: 'center', padding: '40px' }}>
                  <div className="no-data">
                    <span style={{ fontSize: '48px' }}>üì≠</span>
                    <p>Kh√¥ng c√≥ ƒë∆°n h√†ng ph√π h·ª£p</p>
                    <small>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ƒë·ªÉ xem k·∫øt qu·∫£ kh√°c</small>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {showModal && currentBill && (
        <BillDetailModal
          bill={currentBill}
          onClose={() => setShowModal(false)}
          onPrint={() => printBillSlip(currentBill._id)}
        />
      )}
    </div>
  );
};

export default BillManagement;
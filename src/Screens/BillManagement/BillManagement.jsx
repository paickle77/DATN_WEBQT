// üî• OPTIMIZED BillManagement - Thu g·ªçn b·∫£ng v√† ƒë∆∞a chi ti·∫øt v√†o modal - B·ªé CH·ª®C NƒÇNG H·ª¶Y ƒê·ª¶N
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './BillManagement.scss';
import TabBarr from '../../component/tabbar/TabBar.jsx';
import api from '../../utils/api.js';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import RobotoRegular from '../../fonts/RobotoRegular.js';
import { ENUM_PAGE } from '../../component/ENUM/enum.ts';

import StatusBadge from '../../component/StatusBadge.jsx';
import BillDetailModal from '../../component/BillDetailModal.jsx';

// üéØ QU·∫¢N L√ù C√ÅC TR·∫†NG TH√ÅI TR∆Ø·ªöC KHI GIAO H√ÄNG - B·ªé CH·ª®C NƒÇNG H·ª¶Y
const BILL_STATUS = {
  PENDING: 'pending',      
  CONFIRMED: 'confirmed',  
  READY: 'ready',         
  CANCELLED: 'cancelled', // CH·ªà HI·ªÇN TH·ªä, KH√îNG CHO H·ª¶Y
};

const STATUS_LABELS = {
  [BILL_STATUS.PENDING]: 'Ch·ªù x√°c nh·∫≠n',
  [BILL_STATUS.CONFIRMED]: 'ƒê√£ x√°c nh·∫≠n',
  [BILL_STATUS.READY]: 'S·∫µn s√†ng giao',
  [BILL_STATUS.CANCELLED]: 'ƒê√£ h·ªßy',
};

// üî• C·∫¨P NH·∫¨T LU·ªíNG CHUY·ªÇN TR·∫†NG TH√ÅI - B·ªé CH·ª®C NƒÇNG H·ª¶Y
const ALLOWED_TRANSITIONS = {
  [BILL_STATUS.PENDING]: [BILL_STATUS.CONFIRMED], // B·ªé CANCELLED
  [BILL_STATUS.CONFIRMED]: [BILL_STATUS.READY], // B·ªé CANCELLED
  [BILL_STATUS.READY]: [], // B·ªé CANCELLED - chuy·ªÉn sang shipping th√¥ng qua n√∫t ri√™ng
  [BILL_STATUS.CANCELLED]: [], // ƒê∆°n ƒë√£ h·ªßy kh√¥ng th·ªÉ thay ƒë·ªïi
};

const STATUS_COLORS = {
  [BILL_STATUS.PENDING]: '#f59e0b',      
  [BILL_STATUS.CONFIRMED]: '#3b82f6',    
  [BILL_STATUS.READY]: '#8b5cf6',        
  [BILL_STATUS.CANCELLED]: '#ef4444',    
};

// üîê USER ROLE FUNCTIONS
const getUserRole = () => {
  try {
    const token = localStorage.getItem('token');
    if (token) {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.role || 'staff';
    }
  } catch (e) {
    console.error('Error getting user role:', e);
  }
  return 'staff';
};

const getCurrentUserName = () => {
  try {
    const token = localStorage.getItem('token');
    if (token) {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.username || payload.name || 'Unknown User';
    }
  } catch (e) {
    console.error('Error getting username:', e);
  }
  return 'Unknown User';
};

const checkTokenValidity = () => {
  const token = localStorage.getItem('token');
  if (!token) return false;

  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const currentTime = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = payload.exp - currentTime;
    
    if (timeUntilExpiry < 300 && timeUntilExpiry > 0) {
      console.warn('üïê Token s·∫Ω h·∫øt h·∫°n trong', Math.floor(timeUntilExpiry / 60), 'ph√∫t');
    }
    
    return timeUntilExpiry > 0;
  } catch (e) {
    console.error('‚ùå Token validation error:', e);
    return false;
  }
};

const handleAuthError = (error) => {
  if (error.response && (error.response.status === 401 || error.response.status === 403)) {
    console.error('üö® Authentication failed');
    localStorage.removeItem('token');
    alert('‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
    window.location.href = '/';
    return true;
  }
  return false;
};

const BillManagement = () => {
  const navigate = useNavigate();
  const [bills, setBills] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [fromDate, setFromDate] = useState(null);
  const [toDate, setToDate] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [currentBill, setCurrentBill] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const [userRole, setUserRole] = useState('staff');
  const [userName, setUserName] = useState('');
  const [actionHistory, setActionHistory] = useState([]);

  useEffect(() => {
    console.log('=== BILL MANAGEMENT DEBUG ===');
    
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('üö® Kh√¥ng c√≥ token - redirect to login');
      window.location.href = '/';
      return;
    }
    
    setUserRole(getUserRole());
    setUserName(getCurrentUserName());
    
    console.log('‚úÖ Token exists - fetching data...');
    fetchAll();
  }, []);

  const logAction = (action, billId, details = '') => {
    const logEntry = {
      id: Date.now(),
      timestamp: new Date().toISOString(),
      user: userName,
      role: userRole,
      action,
      billId: billId?.slice(-8) || 'N/A',
      details,
      ip: 'N/A'
    };
    
    const existingLogs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
    const updatedLogs = [logEntry, ...existingLogs].slice(0, 100);
    localStorage.setItem('bill_action_logs', JSON.stringify(updatedLogs));
    
    setActionHistory(updatedLogs);
    console.log('üìù Action logged:', logEntry);
  };

  function fetchAll() {
    console.log('üìä Starting fetchAll...');
    setLoading(true);
    setError(null);
    
    // üî• CH·ªà FETCH ENRICHED BILLS
    api.get('/GetAllBills?enrich=true')
       .then((billsRes) => {
         console.log('üìä API Results:');
         console.log('üìã Bills:', billsRes.data.data?.length || 0);
         
         const billData = billsRes.data.data || [];
         
         console.log('üîç Sample bill data:', billData[0]);
         
         const managementBills = billData.filter(bill => 
           ['pending', 'confirmed', 'ready', 'cancelled'].includes(bill.status)
         );
         
         setBills(managementBills);

         const existingLogs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
         setActionHistory(existingLogs);

         if (!billsRes.data.success) {
           setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h√≥a ƒë∆°n');
           console.error('‚ùå Bills API failed');
         }

         setLoading(false);
       }).catch(error => {
         console.error('‚ùå fetchAll error:', error);
         if (handleAuthError(error)) return;
         setError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + (error.response?.data?.msg || error.message));
         setLoading(false);
       });
  }

  // üî• S·ª¨ D·ª§NG D·ªÆ LI·ªÜU T·ª™ ENRICHED API - KH√îNG C·∫¶N LOOKUP
  const getCustomerInfo = (bill) => ({
    name: bill.customerName || 'Kh√°ch h√†ng kh√¥ng r√µ',
    phone: bill.customerPhone || ''
  });

  const getDeliveryInfo = (bill) => ({
    name: bill.deliveryName || 'Ch∆∞a c√≥ t√™n ng∆∞·ªùi nh·∫≠n',
    phone: bill.deliveryPhone || 'Ch∆∞a c√≥ SƒêT',
    address: bill.deliveryAddress || 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ giao h√†ng'
  });

  const getShippingMethod = (bill) => bill.shippingMethodDisplay || bill.shipping_method || 'Ch∆∞a ch·ªçn';
  const getPaymentMethod = (bill) => bill.paymentMethodDisplay || bill.payment_method || 'Ch∆∞a ch·ªçn';
  const getVoucherCode = (bill) => bill.voucherDisplayCode || '‚Äî';

  // üîß FIXED: C·∫£i thi·ªán logic l·∫•y gi√° s·∫£n ph·∫©m
  const getItemPrice = (item) => {
    // Th·ª≠ c√°c field kh√°c nhau theo th·ª© t·ª± ∆∞u ti√™n
    const priceFields = ['unitPrice', 'price', 'unit_price', 'itemPrice', 'productPrice'];
    
    for (const field of priceFields) {
      if (item[field] && Number(item[field]) > 0) {
        return Number(item[field]);
      }
    }
    
    // Fallback: t√≠nh t·ª´ total/quantity n·∫øu c√≥
    if (item.total && item.quantity && Number(item.quantity) > 0) {
      return Number(item.total) / Number(item.quantity);
    }
    
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi√° h·ª£p l·ªá cho item:', item);
    return 0;
  };

  // Filter h√≥a ƒë∆°n
  const filtered = bills.filter(bill => {
    if (filterStatus !== 'all' && bill.status !== filterStatus) {
      return false;
    }
    if (searchTerm) {
      const customerInfo = getCustomerInfo(bill);
      const deliveryInfo = getDeliveryInfo(bill);
      const billId = (bill._id || '').toLowerCase();
      const searchLower = searchTerm.toLowerCase();
      
      if (!customerInfo.name.toLowerCase().includes(searchLower) && 
          !deliveryInfo.name.toLowerCase().includes(searchLower) &&
          !deliveryInfo.phone.toLowerCase().includes(searchLower) &&
          !billId.includes(searchLower)) {
        return false;
      }
    }
    if (bill.created_at) {
      const d = new Date(bill.created_at);
      if (fromDate && d < fromDate) return false;
      if (toDate && d > toDate) return false;
    }
    return true;
  });

  // ‚úÖ C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI - B·ªé LOGIC H·ª¶Y ƒê∆†N
  const updateBillStatus = async (billId, newStatus) => {
    const bill = bills.find(b => b._id === billId);
    if (!bill) return;

    // ‚ùå B·ªé LOGIC H·ª¶Y ƒê∆†N HO√ÄN TO√ÄN
    // Ch·ªâ cho ph√©p chuy·ªÉn tr·∫°ng th√°i ti·∫øn b·ªô: pending -> confirmed -> ready

    const confirmMessage = `‚úÖ X√°c nh·∫≠n chuy·ªÉn tr·∫°ng th√°i th√†nh: ${STATUS_LABELS[newStatus]}?`;

    if (!window.confirm(confirmMessage)) return;

    try {
      await api.put(`/bills/${billId}`, { 
        status: newStatus
      });

      logAction(
        `STATUS_CHANGE: ${bill.status} ‚Üí ${newStatus}`,
        billId,
        'C·∫≠p nh·∫≠t tr·∫°ng th√°i ti·∫øn b·ªô'
      );

      const statusEmoji = {
        [BILL_STATUS.CONFIRMED]: '‚úÖ',
        [BILL_STATUS.READY]: 'üì¶',
      };

      alert(`${statusEmoji[newStatus]} ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh: ${STATUS_LABELS[newStatus]}`);
      fetchAll();
    } catch (err) {
      if (!handleAuthError(err)) {
        console.error('‚ùå Update status error:', err);
        alert('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h√≥a ƒë∆°n: ' + (err.response?.data?.message || err.message));
      }
    }
  };

  // ‚úÖ CHUY·ªÇN SANG GIAO H√ÄNG
  const moveToShipment = (bill) => {
    const deliveryInfo = getDeliveryInfo(bill);
    const confirmMessage = `üöö Chuy·ªÉn ƒë·∫øn m√†n qu·∫£n l√Ω giao h√†ng?\n\n` +
      `üìã M√£ ƒë∆°n: ${bill._id.slice(-8)}\n` +
      `üë§ Kh√°ch h√†ng: ${getCustomerInfo(bill).name}\n` +
      `üìç Ng∆∞·ªùi nh·∫≠n: ${deliveryInfo.name} - ${deliveryInfo.phone}\n` +
      `üìç ƒê·ªãa ch·ªâ: ${deliveryInfo.address}\n\n` +
      `B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn m√†n h√¨nh qu·∫£n l√Ω giao h√†ng.`;

    if (!window.confirm(confirmMessage)) return;

    try {
      logAction('MOVE_TO_SHIPPING', bill._id, 'Chuy·ªÉn sang m√†n qu·∫£n l√Ω giao h√†ng');
      
      localStorage.setItem('selected_bill_for_shipping', JSON.stringify({
        id: bill._id,
        customer: getCustomerInfo(bill).name,
        delivery: deliveryInfo,
        total: bill.total,
        timestamp: new Date().toISOString()
      }));

      console.log('üöö Navigating to ShipmentManagement using React Router...');
      navigate(ENUM_PAGE.ShipmentManagement);
      
    } catch (err) {
      console.error('‚ùå Move to shipping error:', err);
      alert('‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn m√†n qu·∫£n l√Ω giao h√†ng.\n\n' +
            'üîß C√≥ th·ªÉ do:\n' +
            '1. Route ShipmentManagement ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng\n' +
            '2. V·∫•n ƒë·ªÅ v·ªõi React Router\n\n' +
            'üëâ Th·ª≠ navigate th·ªß c√¥ng ho·∫∑c refresh trang');
      
      logAction('SHIPPING_REDIRECT_FAILED', bill._id, `Error: ${err.message}`);
    }
  };

  const canTransitionTo = (currentStatus, targetStatus) => {
    return ALLOWED_TRANSITIONS[currentStatus]?.includes(targetStatus) || false;
  };

  const openModal = async bill => {
    try {
      console.log('üîç Fetching bill details for:', bill._id);
      const { data: res } = await api.get(`/bills/${bill._id}?enrich=true&_=${Date.now()}`);
      
      if (!res || !res.data) {
        throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n');
      }
      
      const billData = res.data;
      console.log('üìã Bill data received:', billData);
      
      setCurrentBill(billData);
      setShowModal(true);

      logAction('VIEW_DETAIL', bill._id, `Xem chi ti·∫øt h√≥a ƒë∆°n`);
    } catch (err) {
      console.error('‚ùå Error opening modal:', err);
      if (!handleAuthError(err)) {
        alert('‚ùå Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt h√≥a ƒë∆°n: ' + (err.response?.data?.msg || err.message));
      }
    }
  };

// üé® FIXED PDF GENERATION - Compact layout v·ªõi spacing ch√≠nh x√°c
const printBillSlip = async billId => {
  try {
    console.log('üñ®Ô∏è Creating enhanced PDF for bill:', billId);
    const { data: res } = await api.get(`/bills/${billId}?enrich=true&_=${Date.now()}`);
    
    if (!res || !res.data) {
      throw new Error('Kh√¥ng c√≥ d·ªØ li·ªáu h√≥a ƒë∆°n');
    }
    
    const bill = res.data;
    console.log('üìÑ PDF data:', bill);
    
    const items = Array.isArray(bill.items) ? bill.items : [];
    const customerInfo = getCustomerInfo(bill);
    const deliveryInfo = getDeliveryInfo(bill);

    // üìÑ T·∫†O PDF V·ªöI THI·∫æT K·∫æ COMPACT
    const doc = new jsPDF({ 
      putOnlyUsedFonts: true, 
      compress: true,
      format: 'a4'
    });
    
    // üîß SETUP FONT AN TO√ÄN CHO TI·∫æNG VI·ªÜT
    let fontLoaded = false;
    try {
      doc.addFileToVFS('Roboto-Regular.ttf', RobotoRegular);
      doc.addFont('Roboto-Regular.ttf', 'Roboto', 'normal');
      doc.setFont('Roboto', 'normal');
      fontLoaded = true;
      console.log('‚úÖ Roboto font loaded successfully');
    } catch (fontErr) {
      console.warn('‚ö†Ô∏è Roboto font failed, using Helvetica:', fontErr);
      doc.setFont('helvetica', 'normal');
    }
    
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 15;
    let yPos = 15; // Starting Y position
    
    // üé® HEADER SECTION - Compact
    doc.setFillColor(102, 126, 234);
    doc.rect(0, 0, pageWidth, 35, 'F'); // Gi·∫£m t·ª´ 40 xu·ªëng 35
    
    // Company info section
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20); // Gi·∫£m t·ª´ 22 xu·ªëng 20
    doc.text('üßÅ CAKESHOP', margin, 16);
    doc.setFontSize(9); // Gi·∫£m t·ª´ 10 xu·ªëng 9
    doc.text('Premium Cake & Bakery', margin, 23);
    doc.text('Hotline: 1900-CAKE | cakeshop.vn', margin, 29);
    
    // Bill title on the right
    doc.setFontSize(16); // Gi·∫£m t·ª´ 18 xu·ªëng 16
    const titleText = 'HOA DON BAN HANG';
    const titleWidth = doc.getTextWidth(titleText);
    doc.text(titleText, pageWidth - margin - titleWidth, 20);
    
    // Reset position after header
    yPos = 42; // Gi·∫£m t·ª´ 50 xu·ªëng 42
    
    // üìã BILL BASIC INFO - Compact
    doc.setFillColor(248, 250, 252);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 20, 'F'); // Gi·∫£m t·ª´ 25 xu·ªëng 20
    doc.setDrawColor(226, 232, 240);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 20, 'S');
    
    // Left column
    doc.setTextColor(75, 85, 99);
    doc.setFontSize(8); // Gi·∫£m t·ª´ 9 xu·ªëng 8
    doc.text('Ma hoa don:', margin + 3, yPos + 6);
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(9); // Gi·∫£m t·ª´ 10 xu·ªëng 9
    doc.text(`#${bill._id.slice(-8)}`, margin + 3, yPos + 12);
    
    // Middle column
    doc.setTextColor(75, 85, 99);
    doc.setFontSize(8);
    doc.text('Ngay tao:', margin + 70, yPos + 6);
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(9);
    const createDate = bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleDateString('vi-VN') : 'N/A');
    doc.text(createDate, margin + 70, yPos + 12);
    
    // Right column - Status with color
    doc.setTextColor(75, 85, 99);
    doc.setFontSize(8);
    doc.text('Trang thai:', margin + 130, yPos + 6);
    const statusColor = STATUS_COLORS[bill.status] || '#6b7280';
    const rgb = hexToRgb(statusColor);
    doc.setTextColor(rgb.r, rgb.g, rgb.b);
    doc.setFontSize(9);
    doc.text(bill.statusDisplay || STATUS_LABELS[bill.status] || bill.status, margin + 130, yPos + 12);
    
    yPos += 25; // Gi·∫£m t·ª´ 35 xu·ªëng 25
    
    // üí≥ PAYMENT & SHIPPING INFO - Compact
    doc.setFillColor(239, 246, 255);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 12, 'F'); // Gi·∫£m t·ª´ 15 xu·ªëng 12
    
    doc.setTextColor(59, 130, 246);
    doc.setFontSize(8);
    doc.text('Thanh toan:', margin + 3, yPos + 4);
    doc.text('Van chuyen:', margin + 70, yPos + 4);
    doc.text('Voucher:', margin + 130, yPos + 4);
    
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(8);
    doc.text(getPaymentMethod(bill), margin + 3, yPos + 9);
    doc.text(getShippingMethod(bill), margin + 70, yPos + 9);
    doc.setTextColor(16, 185, 129);
    doc.text(getVoucherCode(bill), margin + 130, yPos + 9);
    
    yPos += 17; // Gi·∫£m t·ª´ 25 xu·ªëng 17
    
    // üë§ CUSTOMER INFO - Compact
    doc.setFillColor(59, 130, 246);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 10, 'F'); // Gi·∫£m t·ª´ 12 xu·ªëng 10
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text('üë§ THONG TIN KHACH HANG', margin + 3, yPos + 7);
    
    yPos += 14; // Gi·∫£m t·ª´ 18 xu·ªëng 14
    
    // Customer details in 2 columns
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(9);
    doc.text(`Ten: ${customerInfo.name}`, margin + 3, yPos);
    if (customerInfo.phone) {
      doc.text(`SDT: ${customerInfo.phone}`, margin + 100, yPos);
    }
    
    yPos += 12; // Gi·∫£m t·ª´ 15 xu·ªëng 12
    
    // üìç DELIVERY INFO - Compact
    doc.setFillColor(139, 92, 246);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 10, 'F'); // Gi·∫£m t·ª´ 12 xu·ªëng 10
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text('üìç THONG TIN GIAO HANG', margin + 3, yPos + 7);
    
    yPos += 14; // Gi·∫£m t·ª´ 18 xu·ªëng 14
    
    // Delivery details
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(9);
    doc.text(`Nguoi nhan: ${deliveryInfo.name}`, margin + 3, yPos);
    if (deliveryInfo.phone !== 'Ch∆∞a c√≥ SƒêT') {
      doc.text(`SDT: ${deliveryInfo.phone}`, margin + 100, yPos);
    }
    
    yPos += 6; // Gi·∫£m t·ª´ 8 xu·ªëng 6
    
    // Address with proper wrapping - Compact
    doc.setTextColor(75, 85, 99);
    doc.setFontSize(8);
    doc.text('Dia chi:', margin + 3, yPos);
    
    const address = deliveryInfo.address;
    const maxAddressWidth = pageWidth - margin - 25;
    const addressLines = doc.splitTextToSize(address, maxAddressWidth);
    
    doc.setTextColor(17, 24, 39);
    doc.setFontSize(9);
    addressLines.forEach((line, index) => {
      doc.text(line, margin + 3, yPos + 4 + (index * 4)); // Gi·∫£m t·ª´ 6 + index*5 xu·ªëng 4 + index*4
    });
    
    yPos += 4 + (addressLines.length * 4) + 8; // Compact spacing
    
    // üõí PRODUCTS TABLE
    doc.setFillColor(16, 185, 129);
    doc.rect(margin, yPos, pageWidth - (margin * 2), 10, 'F'); // Gi·∫£m t·ª´ 12 xu·ªëng 10
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(10);
    doc.text('üõí CHI TIET SAN PHAM', margin + 3, yPos + 7);
    
    yPos += 14; // Gi·∫£m t·ª´ 18 xu·ªëng 14
    
    // Enhanced table with precise spacing
    const tableData = items.map((item, i) => {
      const itemPrice = getItemPrice(item);
      const itemQty = Number(item?.quantity || 0);
      const itemTotal = itemPrice * itemQty;
      
      return [
        (i + 1).toString(),
        item?.productName || item?.name || 'San pham khong ro',
        itemQty.toString(),
        itemPrice.toLocaleString('vi-VN') + ' d',
        itemTotal.toLocaleString('vi-VN') + ' d'
      ];
    });
    
    autoTable(doc, {
      head: [['#', 'Ten san pham', 'SL', 'Don gia', 'Thanh tien']],
      body: tableData,
      startY: yPos,
      theme: 'striped',
      styles: {
        font: fontLoaded ? 'Roboto' : 'helvetica',
        fontStyle: 'normal',
        fontSize: 8, // Gi·∫£m t·ª´ 9 xu·ªëng 8
        cellPadding: 3, // Gi·∫£m t·ª´ 4 xu·ªëng 3
        textColor: [17, 24, 39],
        lineColor: [226, 232, 240],
        lineWidth: 0.3
      },
      headStyles: {
        fillColor: [16, 185, 129],
        textColor: [255, 255, 255],
        fontSize: 9, // Gi·∫£m t·ª´ 10 xu·ªëng 9
        fontStyle: 'bold',
        halign: 'center'
      },
      alternateRowStyles: {
        fillColor: [248, 250, 252]
      },
      columnStyles: {
        0: { halign: 'center', cellWidth: 15 },
        1: { halign: 'left', cellWidth: 85 },
        2: { halign: 'center', cellWidth: 20 },
        3: { halign: 'right', cellWidth: 30 },
        4: { halign: 'right', cellWidth: 35 }
      },
      margin: { left: margin, right: margin }
    });
    
    // üí∞ COMPACT SUMMARY SECTION - Right aligned
    const yAfterTable = doc.lastAutoTable.finalY + 6; // Gi·∫£m t·ª´ 8 xu·ªëng 6
    const summaryWidth = 60; // Gi·∫£m t·ª´ 65 xu·ªëng 60
    const summaryX = pageWidth - margin - summaryWidth;
    
    // Calculate summary height dynamically
    const hasDiscount = bill.discountAmount && bill.discountAmount > 0;
    const summaryHeight = hasDiscount ? 24 : 18; // Gi·∫£m height
    
    // Summary background
    doc.setFillColor(249, 250, 251);
    doc.rect(summaryX, yAfterTable, summaryWidth, summaryHeight, 'F');
    doc.setDrawColor(209, 213, 219);
    doc.rect(summaryX, yAfterTable, summaryWidth, summaryHeight, 'S');
    
    // Summary content with tighter spacing
    let summaryY = yAfterTable + 4; // Gi·∫£m t·ª´ 5 xu·ªëng 4
    
    doc.setFontSize(8);
    doc.setFontSize(8);
    doc.setTextColor(75, 85, 99);
    doc.text('Tien hang:', summaryX + 2, summaryY);
    doc.setTextColor(17, 24, 39);
    const subtotalText = bill.subtotal_formatted || (Number(bill.subtotal) || 0).toLocaleString('vi-VN') + ' d';
    const subtotalWidth = doc.getTextWidth(subtotalText);
    doc.text(subtotalText, summaryX + summaryWidth - 2 - subtotalWidth, summaryY);
    
    summaryY += 4; // Gi·∫£m t·ª´ 5 xu·ªëng 4
    doc.setTextColor(75, 85, 99);
    doc.text('Phi van chuyen:', summaryX + 2, summaryY);
    doc.setTextColor(17, 24, 39);
    const shippingText = bill.shipping_fee_formatted || (Number(bill.shippingFee) || 0).toLocaleString('vi-VN') + ' d';
    const shippingWidth = doc.getTextWidth(shippingText);
    doc.text(shippingText, summaryX + summaryWidth - 2 - shippingWidth, summaryY);
    
    if (hasDiscount) {
      summaryY += 4; // Gi·∫£m t·ª´ 5 xu·ªëng 4
      doc.setTextColor(220, 38, 38);
      doc.text('Giam gia:', summaryX + 2, summaryY);
      const discountText = '-' + (bill.discount_formatted || (Number(bill.discountAmount)).toLocaleString('vi-VN') + ' d');
      const discountWidth = doc.getTextWidth(discountText);
      doc.text(discountText, summaryX + summaryWidth - 2 - discountWidth, summaryY);
    }
    
    summaryY += 5; // Gi·∫£m t·ª´ 7 xu·ªëng 5
    // Total with separator line
    doc.setDrawColor(16, 185, 129);
    doc.setLineWidth(0.5);
    doc.line(summaryX + 2, summaryY, summaryX + summaryWidth - 2, summaryY);
    
    doc.setFontSize(9); // Gi·∫£m t·ª´ 10 xu·ªëng 9
    doc.setTextColor(16, 185, 129);
    doc.text('TONG CONG:', summaryX + 2, summaryY + 4);
    const totalText = bill.total_formatted || (Number(bill.total) || 0).toLocaleString('vi-VN') + ' d';
    const totalWidth = doc.getTextWidth(totalText);
    doc.text(totalText, summaryX + summaryWidth - 2 - totalWidth, summaryY + 4);
    
    // üìù FOOTER - Positioned properly with enough space
    const footerY = yAfterTable + summaryHeight + 10; // Gi·∫£m t·ª´ 15 xu·ªëng 10
    
    // Ki·ªÉm tra xem c√≥ ƒë·ªß ch·ªó cho footer kh√¥ng
    if (footerY < pageHeight - 25) {
      // Footer separator line
      doc.setDrawColor(226, 232, 240);
      doc.setLineWidth(0.3);
      doc.line(margin, footerY, pageWidth - margin, footerY);
      
      // Thank you message - centered and compact
      doc.setFontSize(10); // TƒÉng t·ª´ 9 l√™n 10 ƒë·ªÉ n·ªïi b·∫≠t h∆°n
      doc.setTextColor(59, 130, 246);
      const thankYouText = 'Cam on quy khach da tin tuong CakeShop!';
      const thankYouWidth = doc.getTextWidth(thankYouText);
      doc.text(thankYouText, (pageWidth - thankYouWidth) / 2, footerY + 6);
      
      // Contact info - single line, smaller font
      doc.setFontSize(8);
      doc.setTextColor(107, 114, 128);
      const contactInfo = '1900-CAKE | support@cakeshop.vn | cakeshop.vn';
      const contactWidth = doc.getTextWidth(contactInfo);
      doc.text(contactInfo, (pageWidth - contactWidth) / 2, footerY + 12);
      
      // Timestamp - bottom right, very small
      const timestamp = `In: ${new Date().toLocaleString('vi-VN')}`;
      const timestampWidth = doc.getTextWidth(timestamp);
      doc.text(timestamp, pageWidth - margin - timestampWidth, footerY + 18);
    } else {
      // N·∫øu kh√¥ng ƒë·ªß ch·ªó, ch·ªâ th√™m thank you message ngay d∆∞·ªõi summary
      const simpleFooterY = yAfterTable + summaryHeight + 3;
      doc.setFontSize(8);
      doc.setTextColor(59, 130, 246);
      const thankYouText = 'Cam on quy khach!';
      const thankYouWidth = doc.getTextWidth(thankYouText);
      doc.text(thankYouText, (pageWidth - thankYouWidth) / 2, simpleFooterY);
    }
    
    // Save PDF with descriptive filename
    const fileName = `CakeShop_HoaDon_${bill._id.slice(-8)}_${new Date().toLocaleDateString('vi-VN').replace(/\//g, '')}.pdf`;
    doc.save(fileName);

    // Log action
    logAction('PRINT_COMPACT_PDF', billId, `In h√≥a ƒë∆°n PDF compact - ${fileName}`);
    
    // Success message
    const successMessage = `‚úÖ ƒê√£ t·∫°o PDF compact th√†nh c√¥ng!\n\n` +
      `üìÑ File: ${fileName}\n` +
      `üë§ Kh√°ch h√†ng: ${customerInfo.name}\n` +
      `üìç ƒê·ªãa ch·ªâ: ${deliveryInfo.address.substring(0, 50)}...\n` +
      `üí∞ T·ªïng ti·ªÅn: ${bill.total_formatted || (Number(bill.total) || 0).toLocaleString('vi-VN')} ƒë\n` +
      `üìä Tr·∫°ng th√°i: ${STATUS_LABELS[bill.status] || bill.status}\n\n` +
      `üé® PDF ƒë∆∞·ª£c t·ªëi ∆∞u v·ªõi layout compact, kh√¥ng b·ªã ƒë√® ch·ªìng!`;
    
    alert(successMessage);

  } catch (err) {
    console.error('‚ùå Compact PDF Error:', err);
    if (!handleAuthError(err)) {
      alert('‚ùå Kh√¥ng th·ªÉ t·∫°o PDF: ' + (err.response?.data?.msg || err.message));
    }
  }
};

// üõ†Ô∏è HELPER FUNCTION - Convert hex color to RGB
function hexToRgb(hex) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : { r: 107, g: 114, b: 128 }; // Default gray
}

  const hideBill = async billId => {
    if (userRole !== 'admin') {
      alert('‚ùå Ch·ªâ Admin m·ªõi c√≥ th·ªÉ ·∫©n h√≥a ƒë∆°n');
      return;
    }

    const reason = prompt('üìù Vui l√≤ng nh·∫≠p l√Ω do ·∫©n h√≥a ƒë∆°n (b·∫Øt bu·ªôc):');
    if (!reason || reason.trim() === '') {
      alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p l√Ω do ·∫©n h√≥a ƒë∆°n');
      return;
    }

    if (!window.confirm(`‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc mu·ªën ·∫®N h√≥a ƒë∆°n n√†y?\n\nL√Ω do: ${reason}\n\nH√≥a ƒë∆°n s·∫Ω kh√¥ng hi·ªÉn th·ªã trong danh s√°ch nh∆∞ng v·∫´n c√≤n trong database.`)) return;

    try {
      await api.put(`/bills/${billId}`, { 
        status: 'hidden',
        hidden_reason: reason,
        hidden_by: userName,
        hidden_at: new Date().toISOString()
      });

      logAction('HIDE_BILL', billId, `·∫®n h√≥a ƒë∆°n. L√Ω do: ${reason}`);
      
      alert('‚úÖ ƒê√£ ·∫©n h√≥a ƒë∆°n.');
      fetchAll();
    } catch (err) {
      console.error(err);
      if (handleAuthError(err)) return;
      
      if (window.confirm('‚ö†Ô∏è Backend ch∆∞a h·ªó tr·ª£ ·∫©n h√≥a ƒë∆°n. B·∫°n c√≥ mu·ªën X√ìA Vƒ®NH VI·ªÑN kh√¥ng?\n\n‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y c√≥ th·ªÉ t·∫°o ra r·ªßi ro b·∫£o m·∫≠t!')) {
        try {
          await api.delete(`/bills/${billId}`);
          
          logAction('DELETE_BILL', billId, `‚ö†Ô∏è X√ìA Vƒ®NH VI·ªÑN - L√Ω do: ${reason} - C·∫¢NH B√ÅO: C√≥ th·ªÉ m·∫•t d·∫•u v·∫øt`);
          
          alert('‚ö†Ô∏è ƒê√£ x√≥a h√≥a ƒë∆°n (kh√¥ng khuy·∫øn kh√≠ch).');
          fetchAll();
        } catch (deleteErr) {
          alert('‚ùå Kh√¥ng th·ªÉ x√≥a h√≥a ƒë∆°n: ' + deleteErr.message);
        }
      }
    }
  };

  const viewActionHistory = () => {
    const logs = JSON.parse(localStorage.getItem('bill_action_logs') || '[]');
    const logsText = logs.map(log => 
      `${new Date(log.timestamp).toLocaleString('vi-VN')} | ${log.user} (${log.role}) | ${log.action} | Bill: ${log.billId} | ${log.details}`
    ).join('\n');
    
    if (logs.length === 0) {
      alert('üìù Ch∆∞a c√≥ l·ªãch s·ª≠ thao t√°c n√†o.');
      return;
    }
    
    const logWindow = window.open('', 'ActionLogs', 'width=800,height=600');
    logWindow.document.write(`
      <html>
        <head>
          <title>L·ªãch s·ª≠ thao t√°c - Bill Management</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            h2 { color: #667eea; }
            pre { background: #f5f5f5; padding: 15px; border-radius: 8px; font-size: 12px; overflow-x: auto; }
            .clear-btn { background: #ef4444; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
          </style>
        </head>
        <body>
          <h2>üìú L·ªãch s·ª≠ thao t√°c h·ªá th·ªëng</h2>
          <p>T·ªïng c·ªông: ${logs.length} thao t√°c</p>
          <button class="clear-btn" onclick="if(confirm('X√≥a to√†n b·ªô l·ªãch s·ª≠?')) { localStorage.removeItem('bill_action_logs'); alert('ƒê√£ x√≥a l·ªãch s·ª≠!'); window.close(); }">üóëÔ∏è X√≥a l·ªãch s·ª≠</button>
          <pre>${logsText}</pre>
        </body>
      </html>
    `);
  };

  // Render action buttons cho t·ª´ng tr·∫°ng th√°i - B·ªé N√öT H·ª¶Y
  const renderActionButtons = (bill) => {
    const currentStatus = bill.status;
    const allowedNextStates = ALLOWED_TRANSITIONS[currentStatus] || [];

    return (
      <td className="actions-cell">
        <div className="action-buttons">
          <button onClick={() => openModal(bill)} className="btn-detail">
            üëÅÔ∏è Chi ti·∫øt
          </button>
          <button onClick={() => printBillSlip(bill._id)} className="btn-print">
            üñ®Ô∏è PDF
          </button>
          
          {/* üî• CH·ªà HI·ªÇN TH·ªä C√ÅC N√öT CHUY·ªÇN TR·∫†NG TH√ÅI TI·∫æN B·ªò - B·ªé N√öT H·ª¶Y */}
          {allowedNextStates.map(nextStatus => {
            return (
              <button
                key={nextStatus}
                onClick={() => updateBillStatus(bill._id, nextStatus)}
                className={`btn-status btn-${nextStatus}`}
                title={`Chuy·ªÉn sang: ${STATUS_LABELS[nextStatus]}`}
                style={{ backgroundColor: STATUS_COLORS[nextStatus] }}
              >
                {getStatusButtonLabel(nextStatus)}
              </button>
            );
          })}
          
          {currentStatus === BILL_STATUS.READY && (
            <button
              onClick={() => moveToShipment(bill)}
              className="btn-move-to-shipping"
              title="Chuy·ªÉn sang m√†n qu·∫£n l√Ω giao h√†ng"
              style={{ backgroundColor: '#06b6d4' }}
            >
              üöö Giao h√†ng
            </button>
          )}

          {/* üî• CH·ªà HI·ªÇN TH·ªä TR·∫†NG TH√ÅI ƒê√É H·ª¶Y, KH√îNG CHO THAO T√ÅC G√å */}
          {currentStatus === BILL_STATUS.CANCELLED && (
            <span className="cancelled-notice" style={{ 
              color: '#ef4444', 
              fontSize: '12px', 
              fontStyle: 'italic',
              padding: '5px 8px',
              background: 'rgba(239, 68, 68, 0.1)',
              borderRadius: '4px'
            }}>
              ƒê∆°n h√†ng ƒë√£ h·ªßy
            </span>
          )}
        </div>
      </td>
    );
  };

  const getStatusButtonLabel = (status) => {
    const labels = {
      [BILL_STATUS.CONFIRMED]: '‚úÖ X√°c nh·∫≠n',
      [BILL_STATUS.READY]: 'üì¶ Chu·∫©n b·ªã xong',
      // B·ªé CANCELLED LABEL
    };
    return labels[status] || STATUS_LABELS[status];
  };

  // Loading v√† error states
  if (loading) {
    return (
      <div className="bill-management">
        <TabBarr />
        <div style={{ textAlign: 'center', padding: '100px' }}>
          <span style={{ fontSize: '48px' }}>‚è≥</span>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
          <small style={{ color: '#718096' }}>
            ƒêang ki·ªÉm tra token v√† t·∫£i d·ªØ li·ªáu...
          </small>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bill-management">
        <TabBarr />
        <div style={{ textAlign: 'center', padding: '100px' }}>
          <span style={{ fontSize: '48px' }}>‚ùå</span>
          <p style={{ color: '#ef4444', fontSize: '18px' }}>{error}</p>
          <button onClick={fetchAll} style={{ 
            padding: '12px 24px', 
            background: '#667eea', 
            color: 'white', 
            border: 'none', 
            borderRadius: '8px',
            cursor: 'pointer',
            marginTop: '20px'
          }}>
            üîÑ Th·ª≠ l·∫°i
          </button>
          <br />
          <small style={{ color: '#718096', marginTop: '10px', display: 'block' }}>
            N·∫øu l·ªói li√™n t·ª•c x·∫£y ra, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c ƒëƒÉng nh·∫≠p l·∫°i
          </small>
        </div>
      </div>
    );
  }

  return (
    <div className="bill-management">
      <TabBarr />
      
      <div className="management-header">
        <div className="header-icon">
          <span style={{ fontSize: '48px' }}>üìã</span>
        </div>
        <div className="header-content">
          <h2>Qu·∫£n l√Ω ƒê∆°n h√†ng</h2>
          <p>X·ª≠ l√Ω ƒë∆°n h√†ng t·ª´ khi ƒë·∫∑t h√†ng ƒë·∫øn s·∫µn s√†ng giao - Kh√¥ng th·ªÉ h·ªßy ƒë∆°n</p>
          
          <div className="user-info-badge" style={{
            marginTop: '10px',
            padding: '8px 15px',
            background: 'rgba(102, 126, 234, 0.1)',
            borderRadius: '20px',
            fontSize: '14px',
            color: '#667eea'
          }}>
            üë§ <strong>{userName}</strong> | 
            üè∑Ô∏è <strong>{userRole.toUpperCase()}</strong> | 
            üìä <strong>{actionHistory.length}</strong> thao t√°c ƒë√£ th·ª±c hi·ªán |
            üîê <span style={{ color: checkTokenValidity() ? '#10b981' : '#ef4444' }}>
              {checkTokenValidity() ? 'Token h·ª£p l·ªá' : 'Token h·∫øt h·∫°n'}
            </span>
          </div>
        </div>
      </div>

      <div className="filter-bar">
        <div className="filter-group">
          <label>üîç T√¨m ki·∫øm:</label>
          <input
            type="text"
            placeholder="T√™n kh√°ch h√†ng, ng∆∞·ªùi nh·∫≠n, SƒêT ho·∫∑c m√£ h√≥a ƒë∆°n..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="filter-group">
          <label>üìä Tr·∫°ng th√°i:</label>
          <select value={filterStatus} onChange={e => setFilterStatus(e.target.value)}>
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            {Object.entries(STATUS_LABELS).map(([status, label]) => (
              <option key={status} value={status}>{label}</option>
            ))}
          </select>
        </div>

        <div className="filter-group">
          <label>üìÖ T·ª´ ng√†y:</label>
          <DatePicker
            selected={fromDate}
            onChange={setFromDate}
            placeholderText="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
            dateFormat="dd/MM/yyyy"
          />
        </div>
        
        <div className="filter-group">
          <label>üìÖ ƒê·∫øn ng√†y:</label>
          <DatePicker
            selected={toDate}
            onChange={setToDate}
            placeholderText="Ch·ªçn ng√†y k·∫øt th√∫c"
            dateFormat="dd/MM/yyyy"
          />
        </div>
        
        <button onClick={fetchAll} className="filter-btn">üîÑ L√†m m·ªõi</button>
        
        {(userRole === 'manager' || userRole === 'admin') && (
          <button onClick={viewActionHistory} className="filter-btn" style={{background: '#10b981'}}>
            üìú L·ªãch s·ª≠ ({actionHistory.length})
          </button>
        )}
      </div>

      <div className="quick-stats">
        <div className="stat-card pending">
          <div className="stat-icon">‚è≥</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.PENDING).length}</span>
            <span className="stat-label">Ch·ªù x√°c nh·∫≠n</span>
          </div>
        </div>
        
        <div className="stat-card confirmed">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.CONFIRMED).length}</span>
            <span className="stat-label">ƒê√£ x√°c nh·∫≠n</span>
          </div>
        </div>
        
        <div className="stat-card ready">
          <div className="stat-icon">üì¶</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.READY).length}</span>
            <span className="stat-label">S·∫µn s√†ng giao</span>
          </div>
        </div>
        
        <div className="stat-card cancelled">
          <div className="stat-icon">‚ùå</div>
          <div className="stat-content">
            <span className="stat-number">{bills.filter(b => b.status === BILL_STATUS.CANCELLED).length}</span>
            <span className="stat-label">ƒê√£ h·ªßy</span>
          </div>
        </div>
      </div>

      {/* üî• B·∫¢NG M·ªöI THU G·ªåN - CH·ªà NH·ªÆNG C·ªòT QUAN TR·ªåNG */}
      <div className="table-wrapper">
        <table className="bills-table">
          <thead>
            <tr>
              <th>#</th>
              <th>üìã ƒê∆°n h√†ng</th>
              <th>üë§ Kh√°ch h√†ng</th>
              <th>üìû Li√™n h·ªá nh·∫≠n h√†ng</th>
              <th>üìç ƒê·ªãa ch·ªâ giao h√†ng</th>
              <th>üíµ T·ªïng ti·ªÅn</th>
              <th>üìä Tr·∫°ng th√°i</th>
              <th>‚è∞ Th·ªùi gian</th>
              <th>‚öôÔ∏è H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filtered.map((bill, i) => {
              const customerInfo = getCustomerInfo(bill);
              const deliveryInfo = getDeliveryInfo(bill);
              
              return (
                <tr key={bill._id} className={`bill-row status-${bill.status}`}>
                  <td className="row-number">{i + 1}</td>
                  
                  <td className="bill-cell">
                    <div className="bill-info">
                      <span className="bill-id">#{(bill._id || '').slice(-8)}</span>
                      <span className="bill-date">
                        {bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleDateString('vi-VN') : 'N/A')}
                      </span>
                      <span className="shipping-method">{getShippingMethod(bill)}</span>
                    </div>
                  </td>

                  <td className="customer-cell">
                    <div className="customer-info">
                      <span className="customer-name">{customerInfo.name}</span>
                      {customerInfo.phone && (
                        <a href={`tel:${customerInfo.phone}`} className="customer-phone">
                          üìû {customerInfo.phone}
                        </a>
                      )}
                    </div>
                  </td>

                  <td className="delivery-contact-cell">
                    <div className="delivery-contact">
                      <span className="delivery-name">{deliveryInfo.name}</span>
                      {deliveryInfo.phone !== 'Ch∆∞a c√≥ SƒêT' && (
                        <a href={`tel:${deliveryInfo.phone}`} className="delivery-phone">
                          üìû {deliveryInfo.phone}
                        </a>
                      )}
                    </div>
                  </td>

                  <td className="address-cell">
                    <span className="address-text" title={deliveryInfo.address}>
                      {deliveryInfo.address.length > 60 
                        ? deliveryInfo.address.substring(0, 60) + '...'
                        : deliveryInfo.address}
                    </span>
                  </td>

                  <td className="total-cell">
                    <div className="total-info">
                      <span className="total-amount">
                        {bill.total_formatted || (Number(bill.total) || 0).toLocaleString('vi-VN')} ƒë
                      </span>
                      {bill.discountAmount && bill.discountAmount > 0 && (
                        <span className="discount-badge">
                          Gi·∫£m: {bill.discount_formatted || (Number(bill.discountAmount)).toLocaleString('vi-VN')} ƒë
                        </span>
                      )}
                      <span className="payment-method">
                        {getPaymentMethod(bill)}
                      </span>
                    </div>
                  </td>

                  <td className="status-cell">
                    <div 
                      className="status-badge" 
                      style={{ backgroundColor: STATUS_COLORS[bill.status] || '#6b7280' }}
                    >
                      {bill.statusDisplay || STATUS_LABELS[bill.status] || bill.status}
                    </div>
                  </td>

                  <td className="time-cell">
                    <div className="time-info">
                      <span className="date">
                        {bill.created_date || (bill.created_at ? new Date(bill.created_at).toLocaleDateString('vi-VN') : 'N/A')}
                      </span>
                      <small className="time">
                        {bill.created_at ? new Date(bill.created_at).toLocaleTimeString('vi-VN') : ''}
                      </small>
                    </div>
                  </td>
                  
                  {renderActionButtons(bill)}
                </tr>
              );
            })}
            
            {filtered.length === 0 && (
              <tr>
                <td colSpan="9" style={{ textAlign: 'center', padding: '40px' }}>
                  <div className="no-data">
                    <span style={{ fontSize: '48px' }}>üì≠</span>
                    <p>Kh√¥ng c√≥ ƒë∆°n h√†ng ph√π h·ª£p</p>
                    <small>Th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ƒë·ªÉ xem k·∫øt qu·∫£ kh√°c</small>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {showModal && currentBill && (
        <BillDetailModal
          bill={currentBill}
          onClose={() => setShowModal(false)}
          onPrint={() => printBillSlip(currentBill._id)}
        />
      )}
    </div>
  );
};

export default BillManagement;
import React, { useState, useEffect } from 'react';
import './ShipperManagement.scss';
import TabBar from '../../component/tabbar/TabBar';
import api from '../../utils/api';
import {
  FaSearch,
  FaPlus,
  FaEdit,
  FaTrash,
  FaEye,
  FaPhone,
  FaIdCard,
  FaMotorcycle,
  FaCircle,
  FaImage,
  FaUser,
  FaEnvelope,
  FaLock,
  FaUnlock,
  FaBan
} from 'react-icons/fa';

const ShipperManagement = () => {
  const [shippers, setShippers] = useState([]);
  const [filteredShippers, setFilteredShippers] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showModal, setShowModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [selectedShipper, setSelectedShipper] = useState(null);
  const [formData, setFormData] = useState({
    // Account fields - CH·ªà T·∫†O M·ªöI
    email: '',
    password: '',
    // Shipper fields  
    full_name: '',
    phone: '',
    license_number: '',
    vehicle_type: '',
    is_online: false,
    //image: null
  });
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [onlineFilter, setOnlineFilter] = useState('all');
  const [previewImage, setPreviewImage] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    filterShippers();
  }, [searchTerm, shippers, onlineFilter]);

    const fetchData = async () => {
      setLoading(true);
      try {
        console.log('üîÑ Fetching shippers...');
        
        const token = localStorage.getItem('token');
        const shippersRes = await api.get('/shippers', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        console.log('‚úÖ Shippers response:', shippersRes.data);
        
        if (shippersRes.data && shippersRes.data.data) {
          // ‚úÖ Populate account th√¥ng tin cho m·ªói shipper
          const shippersWithAccounts = await Promise.all(
            shippersRes.data.data.map(async (shipper) => {
              if (shipper.account_id) {
                try {
                  const accountRes = await api.get(`/accounts/${shipper.account_id}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                  });
                  
                  console.log(`üìß Account for shipper ${shipper.full_name}:`, accountRes.data.data);
                  
                  return {
                    ...shipper,
                    account: accountRes.data.data || null
                  };
                } catch (accountError) {
                  console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin account cho shipper ${shipper.full_name}:`, accountError);
                  return { 
                    ...shipper, 
                    account: null 
                  };
                }
              }
              return { 
                ...shipper, 
                account: null 
              };
            })
          );
          
          console.log('üìä Final shippers with accounts:', shippersWithAccounts);
          setShippers(shippersWithAccounts);
        } else {
          console.warn('‚ö†Ô∏è No shipper data found');
          setShippers([]);
        }

      } catch (error) {
        console.error('‚ùå Error fetching shippers:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu shipper!');
        setShippers([]);
      } finally {
        setLoading(false);
      }
    };
  const filterShippers = () => {
    let filtered = shippers.filter(shipper =>
      shipper.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      shipper.phone?.includes(searchTerm) ||
      shipper.license_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      shipper.account?.email?.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (onlineFilter !== 'all') {
      if (onlineFilter === 'online') {
        filtered = filtered.filter(shipper => shipper.is_online === true);
      } else if (onlineFilter === 'offline') {
        filtered = filtered.filter(shipper => shipper.is_online === false);
      } else if (onlineFilter === 'busy') {
        filtered = filtered.filter(shipper => shipper.is_online === 'busy');
      }
    }

    setFilteredShippers(filtered);
  };

  const getAccountEmail = (shipper) => {
    if (shipper.account && shipper.account.email) {
      return shipper.account.email;
    }
    return 'Ch∆∞a c√≥ t√†i kho·∫£n';
  };

  // ‚úÖ Hi·ªÉn th·ªã ·∫£nh shipper - S·ª¨A L·ªñI HI·ªÇN TH·ªä
  const renderShipperImage = (shipper, size = 'small') => {
    const sizeClass = size === 'large' ? 'shipper-image-large' : 'shipper-image-small';
    
    if (!shipper.image) {
      return (
        <div className={`no-image ${sizeClass}`}>
          <FaUser />
        </div>
      );
    }

    // ‚úÖ X·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng ·∫£nh kh√°c nhau
    let imageSrc = '';
    
    if (shipper.image.startsWith('data:image/')) {
      // Base64 image
      imageSrc = shipper.image;
    } else if (shipper.image.startsWith('/uploads/')) {
      // File path from server
      imageSrc = `${process.env.REACT_APP_API_URL || 'http://localhost:3001'}${shipper.image}`;
    } else if (shipper.image.startsWith('http')) {
      // Full URL
      imageSrc = shipper.image;
    } else {
      // Filename only
      imageSrc = `${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/uploads/${shipper.image}`;
    }

    return (
      <div className="image-wrapper">
        <img 
          src={imageSrc}
          alt={shipper.full_name}
          className={`shipper-image ${sizeClass}`}
          onError={(e) => {
            console.log('Image load error for:', imageSrc);
            e.target.style.display = 'none';
            e.target.nextSibling?.style && (e.target.nextSibling.style.display = 'flex');
          }}
          onLoad={(e) => {
            if (e.target.nextSibling?.style) {
              e.target.nextSibling.style.display = 'none';
            }
          }}
        />
        <div className={`no-image ${sizeClass}`} style={{display: 'none'}}>
          <FaUser />
        </div>
      </div>
    );
  };

  const handleAddNew = () => {
    setFormData({
      // Account fields - CH·ªà D√ÄNH CHO T·∫†O M·ªöI
      email: '',
      password: '',
      // Shipper fields
      full_name: '',
      phone: '',
      license_number: '',
      vehicle_type: '',
      is_online: false,
      image: null
    });
    setPreviewImage(null);
    setIsEditing(false);
    setShowModal(true);
  };

  const handleEdit = (shipper) => {
    // ‚úÖ KHI EDIT: Ch·ªâ cho ph√©p s·ª≠a th√¥ng tin shipper, KH√îNG s·ª≠a account
    setFormData({
      // Kh√¥ng c√≥ email, password khi edit
      full_name: shipper.full_name,
      phone: shipper.phone,
      license_number: shipper.license_number || '',
      vehicle_type: shipper.vehicle_type || '',
      is_online: shipper.is_online === true,
      image: null // File s·∫Ω ƒë∆∞·ª£c set ri√™ng
    });
    
    // ‚úÖ Set preview image hi·ªán t·∫°i
    if (shipper.image) {
      if (shipper.image.startsWith('data:image/')) {
        setPreviewImage(shipper.image);
      } else if (shipper.image.startsWith('/uploads/')) {
        setPreviewImage(`${process.env.REACT_APP_API_URL || 'http://localhost:3001'}${shipper.image}`);
      } else if (shipper.image.startsWith('http')) {
        setPreviewImage(shipper.image);
      } else {
        setPreviewImage(`${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/uploads/${shipper.image}`);
      }
    } else {
      setPreviewImage(null);
    }
    
    setSelectedShipper(shipper);
    setIsEditing(true);
    setShowModal(true);
  };

  const handleViewDetail = (shipper) => {
    setSelectedShipper(shipper);
    setShowDetailModal(true);
  };

    const handleDelete = async (shipperId) => {
      if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a shipper n√†y? H√†nh ƒë·ªông n√†y s·∫Ω x√≥a c·∫£ t√†i kho·∫£n li√™n quan v√† kh√¥ng th·ªÉ ho√†n t√°c.')) {
        try {
          const token = localStorage.getItem('token');
          
          // T√¨m shipper ƒë·ªÉ l·∫•y account_id
          const shipperToDelete = shippers.find(s => s._id === shipperId);
          console.log('üóëÔ∏è Deleting shipper:', shipperToDelete);
          
          if (shipperToDelete && shipperToDelete.account_id) {
            // X√≥a account tr∆∞·ªõc
            try {
              console.log('üóëÔ∏è Deleting account:', shipperToDelete.account_id);
              await api.delete(`/accounts/${shipperToDelete.account_id}`, {
                headers: { 'Authorization': `Bearer ${token}` }
              });
              console.log('‚úÖ ƒê√£ x√≥a account:', shipperToDelete.account_id);
            } catch (accountError) {
              console.error('‚ùå L·ªói khi x√≥a account:', accountError);
              
              // N·∫øu l·ªói 404 (account kh√¥ng t·ªìn t·∫°i) th√¨ v·∫´n ti·∫øp t·ª•c x√≥a shipper
              if (accountError.response?.status !== 404) {
                alert('C√≥ l·ªói x·∫£y ra khi x√≥a t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i!');
                return;
              }
              console.warn('‚ö†Ô∏è Account kh√¥ng t·ªìn t·∫°i, ti·∫øp t·ª•c x√≥a shipper');
            }
          }
          
          // X√≥a shipper
          console.log('üóëÔ∏è Deleting shipper:', shipperId);
          await api.delete(`/shippers/${shipperId}`, {
            headers: { 'Authorization': `Bearer ${token}` }
          });
          
          console.log('‚úÖ ƒê√£ x√≥a shipper th√†nh c√¥ng');
          alert('X√≥a shipper v√† t√†i kho·∫£n th√†nh c√¥ng!');
          
          // Reload d·ªØ li·ªáu
          await fetchData();
          
        } catch (error) {
          console.error('‚ùå Error deleting shipper:', error);
          if (error.response?.data?.message) {
            alert(`C√≥ l·ªói x·∫£y ra: ${error.response.data.message}`);
          } else {
            alert('C√≥ l·ªói x·∫£y ra khi x√≥a shipper!');
          }
        }
      }
    };

  // ‚úÖ TH√äM: Ch·ª©c nƒÉng kh√≥a/m·ªü kh√≥a t√†i kho·∫£n shipper
  const handleToggleLockAccount = async (shipper) => {
    if (!shipper.account || !shipper.account_id) {
      alert('Shipper n√†y kh√¥ng c√≥ t√†i kho·∫£n ƒë·ªÉ kh√≥a/m·ªü kh√≥a');
      return;
    }

    const isLocked = shipper.account.is_lock;
    const action = isLocked ? 'm·ªü kh√≥a' : 'kh√≥a';
    
    if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${action} t√†i kho·∫£n c·ªßa shipper "${shipper.full_name}"?`)) {
      try {
        const token = localStorage.getItem('token');
        const endpoint = isLocked ? 'unlock' : 'lock';
        
        await api.put(`/accounts/${shipper.account_id}/${endpoint}`, {
          reason: isLocked ? undefined : 'Admin kh√≥a t√†i kho·∫£n shipper'
        }, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        alert(`${action.charAt(0).toUpperCase() + action.slice(1)} t√†i kho·∫£n th√†nh c√¥ng!`);
        fetchData();
      } catch (error) {
        console.error(`Error ${action} account:`, error);
        alert(`C√≥ l·ªói x·∫£y ra khi ${action} t√†i kho·∫£n!`);
      }
    }
  };


const handleSubmit = async (e) => {
  e.preventDefault();
  setLoading(true);

  try {
    const token = localStorage.getItem('token');
    
    // ‚úÖ Validation
    if (!formData.full_name.trim() || !formData.phone.trim()) {
      alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t√™n v√† s·ªë ƒëi·ªán tho·∫°i');
      setLoading(false);
      return;
    }

    if (!isEditing) {
      // ‚úÖ KHI T·∫†O M·ªöI: B·∫Øt bu·ªôc c√≥ email v√† password
      if (!formData.email.trim() || !formData.password.trim()) {
        alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u cho t√†i kho·∫£n shipper');
        setLoading(false);
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        alert('Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng');
        setLoading(false);
        return;
      }

      // Validate password length
      if (formData.password.length < 6) {
        alert('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
        setLoading(false);
        return;
      }
    }

    // ‚úÖ THAY ƒê·ªîI: G·ª≠i JSON thay v√¨ FormData (b·ªè ·∫£nh)
    const dataToSend = {
      // Th√¥ng tin account (ch·ªâ khi t·∫°o m·ªõi)
      ...((!isEditing) && {
        email: formData.email.trim(),
        password: formData.password
      }),
      
      // Th√¥ng tin shipper
      full_name: formData.full_name.trim(),
      phone: formData.phone.trim(),
      license_number: formData.license_number || '',
      vehicle_type: formData.vehicle_type || '',
      is_online: formData.is_online
      // B·ªè image - shipper s·∫Ω t·ª± th√™m sau
    };

    console.log('üì§ Submitting JSON data:', dataToSend);

    const config = {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json' // Thay ƒë·ªïi t·ª´ multipart/form-data
      }
    };

    if (isEditing) {
      // ‚úÖ C·∫¨P NH·∫¨T: Ch·ªâ c·∫≠p nh·∫≠t th√¥ng tin shipper
      await api.put(`/shippers/${selectedShipper._id}`, dataToSend, config);
      alert('C·∫≠p nh·∫≠t th√¥ng tin shipper th√†nh c√¥ng!');
    } else {
      // ‚úÖ T·∫†O M·ªöI: T·∫°o c·∫£ account v√† shipper
      await api.post('/shippers/create-with-account', dataToSend, config);
      alert('T·∫°o t√†i kho·∫£n v√† shipper th√†nh c√¥ng!');
    }
    
    setShowModal(false);
    setPreviewImage(null);
    
    // üîß Reload l·∫°i data
    await fetchData();
  } catch (error) {
    console.error('Error saving shipper:', error);
    
    if (error.response) {
      const errorMsg = error.response.data?.message || error.response.data?.error || 'C√≥ l·ªói x·∫£y ra';
      
      // ‚úÖ X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (errorMsg.includes('Email ƒë√£ t·ªìn t·∫°i')) {
        alert('Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn email kh√°c.');
      } else if (errorMsg.includes('E11000') && errorMsg.includes('email')) {
        alert('Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn email kh√°c.');
      } else {
        alert(`L·ªói: ${errorMsg}`);
      }
    } else {
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin shipper!');
    }
  } finally {
    setLoading(false);
  }
};

// üîß S·ª¨A: Logic hi·ªÉn th·ªã button kh√≥a/m·ªü kh√≥a trong table
// Trong ph·∫ßn render table, s·ª≠a ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã button:

// ‚úÖ HI·ªÇN TH·ªä N√öT KH√ìA CH·ªà KHI C√ì ACCOUNT V√Ä ACCOUNT_ID (ƒë√£ c√≥ trong ph·∫ßn render table)

// üîß S·ª¨A: H√†m getAccountEmail ƒë·ªÉ hi·ªÉn th·ªã ch√≠nh x√°c
// (ƒê√£ khai b√°o ·ªü tr√™n, x√≥a duplicate)

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const getStatusDisplay = (shipper) => {
    if (shipper.is_online === 'busy') {
      return { text: 'ƒêang giao h√†ng', class: 'busy' };
    } else if (shipper.is_online === true || shipper.is_online === 'true') {
      return { text: 'Online', class: 'online' };
    } else {
      return { text: 'Offline', class: 'offline' };
    }
  };

  const getOnlineCount = () => {
    return shippers.filter(s => s.is_online === true || s.is_online === 'true').length;
  };

  const getOfflineCount = () => {
    return shippers.filter(s => 
      s.is_online !== true && 
      s.is_online !== 'true' && 
      s.is_online !== 'busy'
    ).length;
  };

  const getBusyCount = () => {
    return shippers.filter(s => s.is_online === 'busy').length;
  };

  return (
    <>
      <TabBar />
      <div className="shipper-management">
        <div className="header">
          <h2>Qu·∫£n l√Ω Shipper</h2>
          <button className="add-btn" onClick={handleAddNew}>
            <FaPlus /> Th√™m Shipper
          </button>
        </div>

        <div className="filters">
          <div className="search-container">
            <FaSearch className="search-icon" />
            <input
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n, SƒêT, bi·ªÉn s·ªë, email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="status-filter">
            <select 
              value={onlineFilter} 
              onChange={(e) => setOnlineFilter(e.target.value)}
            >
              <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option value="online">ƒêang online</option>
              <option value="offline">ƒêang offline</option>
              <option value="busy">ƒêang giao h√†ng</option>
            </select>
          </div>
        </div>

        <div className="stats">
          <div className="stat-card total">
            <h3>{shippers.length}</h3>
            <p>T·ªïng Shipper</p>
          </div>
          <div className="stat-card online">
            <h3>{getOnlineCount()}</h3>
            <p>ƒêang Online</p>
          </div>
          <div className="stat-card offline">
            <h3>{getOfflineCount()}</h3>
            <p>Offline/Kh√°c</p>
          </div>
          <div className="stat-card busy">
            <h3>{getBusyCount()}</h3>
            <p>ƒêang Giao H√†ng</p>
          </div>
        </div>

        <div className="table-container">
          {loading ? (
            <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
          ) : (
            <table className="shipper-table">
              <thead>
                <tr>
                  <th>·∫¢nh</th>
                  <th>T√™n Shipper</th>
                  <th>Email T√†i Kho·∫£n</th>
                  <th>S·ªë ƒêi·ªán Tho·∫°i</th>
                  <th>Bi·ªÉn S·ªë Xe</th>
                  <th>Lo·∫°i Xe</th>
                  <th>Tr·∫°ng Th√°i</th>
                  <th>Thao T√°c</th>
                </tr>
              </thead>
              <tbody>
                {filteredShippers.map((shipper) => {
                  const statusInfo = getStatusDisplay(shipper);
                  
                  return (
                    <tr key={shipper._id}>
                      <td className="image-cell">
                        {renderShipperImage(shipper, 'small')}
                      </td>
                      <td className="name-cell">
                        <strong>{shipper.full_name}</strong>
                      </td>
                      <td>
                        <div className="account-info">
                          <FaEnvelope className="icon" />
                          {getAccountEmail(shipper)}
                          {shipper.account?.is_lock && (
                            <FaLock className="lock-icon" title="T√†i kho·∫£n b·ªã kh√≥a" />
                          )}
                        </div>
                      </td>
                      <td>
                        <FaPhone className="icon" /> {shipper.phone}
                      </td>
                      <td>
                        {shipper.license_number && (
                          <>
                            <FaIdCard className="icon" /> {shipper.license_number}
                          </>
                        )}
                      </td>
                      <td>
                        {shipper.vehicle_type && (
                          <>
                            <FaMotorcycle className="icon" /> {shipper.vehicle_type}
                          </>
                        )}
                      </td>
                      <td>
                        <div className={`status ${statusInfo.class}`}>
                          <FaCircle className="status-icon" />
                          {statusInfo.text}
                        </div>
                      </td>
                      <td className="actions">
                        <button 
                          className="btn view" 
                          onClick={() => handleViewDetail(shipper)}
                          title="Xem chi ti·∫øt"
                        >
                          <FaEye />
                        </button>
                        {/* <button 
                          className="btn edit" 
                          onClick={() => handleEdit(shipper)}
                          title="Ch·ªânh s·ª≠a th√¥ng tin shipper"
                        >
                          <FaEdit />
                        </button> */}
                        
                        {/* ‚úÖ CH·ªà HI·ªÇN TH·ªä N√öT KH√ìA KHI C√ì ACCOUNT V√Ä ACCOUNT_ID */}
                        {shipper.account_id && shipper.account && (
                          <button 
                            className={`btn lock ${shipper.account.is_lock ? 'unlock' : 'lock'}`}
                            onClick={() => handleToggleLockAccount(shipper)}
                            title={shipper.account.is_lock ? "M·ªü kh√≥a t√†i kho·∫£n" : "Kh√≥a t√†i kho·∫£n"}
                          >
                            {shipper.account.is_lock ? <FaUnlock /> : <FaLock />}
                          </button>
                        )}
                        
                        {/* ‚úÖ N√öT X√ìA LU√îN HI·ªÇN TH·ªä */}
                        <button 
                          className="btn delete delete-btn-red" 
                          onClick={() => handleDelete(shipper._id)}
                          title="X√≥a shipper v√† t√†i kho·∫£n"
                        >
                          <FaTrash />
                        </button>
                      </td>
                    </tr>
                  );
                })}
                {filteredShippers.length === 0 && !loading && (
                  <tr>
                    <td colSpan="8" className="no-data">
                      Kh√¥ng t√¨m th·∫•y shipper n√†o
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          )}
        </div>

        {/* Modal Form */}
        {showModal && (
          <div className="modal-overlay">
            <div className="modal">
              <div className="modal-header">
                <h3>{isEditing ? 'Ch·ªânh S·ª≠a Th√¥ng Tin Shipper' : 'T·∫°o Shipper v√† T√†i Kho·∫£n M·ªõi'}</h3>
                <button 
                  className="close-btn"
                  onClick={() => setShowModal(false)}
                >
                  √ó
                </button>
              </div>
              <form onSubmit={handleSubmit} encType="multipart/form-data">
                {/* ‚úÖ CH·ªà HI·ªÇN TH·ªä EMAIL/PASSWORD KHI T·∫†O M·ªöI */}
                {!isEditing && (
                  <>
                    <div className="account-section">
                      <h4 className="section-title">
                        <FaEnvelope /> Th√¥ng Tin T√†i Kho·∫£n
                      </h4>
                      <div className="form-group">
                        <label>Email ƒêƒÉng Nh·∫≠p: *</label>
                        <input
                          type="email"
                          name="email"
                          value={formData.email}
                          onChange={handleInputChange}
                          required
                          placeholder="Nh·∫≠p email ƒë·ªÉ shipper ƒëƒÉng nh·∫≠p"
                        />
                        <span className="form-note">
                          Email n√†y s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ shipper ƒëƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng
                        </span>
                      </div>

                      <div className="form-group">
                        <label>M·∫≠t Kh·∫©u: *</label>
                        <input
                          type="password"
                          name="password"
                          value={formData.password}
                          onChange={handleInputChange}
                          required
                          placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                          minLength={6}
                        />
                        <span className="form-note">
                          M·∫≠t kh·∫©u t·∫°m th·ªùi, shipper c√≥ th·ªÉ ƒë·ªïi sau khi ƒëƒÉng nh·∫≠p
                        </span>
                      </div>
                    </div>
                  </>
                )}

                {/* ‚úÖ HI·ªÇN TH·ªä TH√îNG TIN ACCOUNT KHI EDIT (CH·ªà ƒê·ªåC) */}
                {isEditing && selectedShipper?.account && (
                  <div className="account-info-display">
                    <h4 className="section-title">
                      <FaEnvelope /> Th√¥ng Tin T√†i Kho·∫£n (Ch·ªâ ƒë·ªçc)
                    </h4>
                    <div className="account-display">
                      <div className="display-row">
                        <span className="label">Email:</span>
                        <span className="value">{selectedShipper.account.email}</span>
                      </div>
                      <div className="display-row">
                        <span className="label">Tr·∫°ng th√°i:</span>
                        <span className={`value ${selectedShipper.account.is_lock ? 'locked' : 'active'}`}>
                          {selectedShipper.account.is_lock ? (
                            <>
                              <FaLock className="icon" /> B·ªã kh√≥a
                            </>
                          ) : (
                            <>
                              <FaUnlock className="icon" /> Ho·∫°t ƒë·ªông
                            </>
                          )}
                        </span>
                      </div>
                    </div>
                    <div className="form-note">
                      <strong>L∆∞u √Ω:</strong> Ch·ªâ c√≥ th·ªÉ s·ª≠a th√¥ng tin c√° nh√¢n shipper. 
                      Email/m·∫≠t kh·∫©u do shipper t·ª± qu·∫£n l√Ω. 
                      S·ª≠ d·ª•ng n√∫t kh√≥a/m·ªü kh√≥a ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t√†i kho·∫£n.
                    </div>
                  </div>
                )}

                {/* ‚úÖ TH√îNG TIN SHIPPER */}
                <div className="shipper-section">
                  <h4 className="section-title">
                    <FaUser /> Th√¥ng Tin Shipper
                  </h4>

                  {/* ‚úÖ Th√¥ng b√°o v·ªÅ ·∫£nh */}
                  <div className="form-note-section">
                    <div className="form-note">
                      <FaImage className="icon" />
                      <strong>L∆∞u √Ω v·ªÅ ·∫£nh ƒë·∫°i di·ªán:</strong> Shipper s·∫Ω t·ª± c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán sau khi ƒëƒÉng nh·∫≠p v√†o ·ª©ng d·ª•ng di ƒë·ªông.
                    </div>
                  </div>

                  <div className="form-group">
                    <label>T√™n Shipper: *</label>
                    <input
                      type="text"
                      name="full_name"
                      value={formData.full_name}
                      onChange={handleInputChange}
                      required
                      placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß c·ªßa shipper"
                    />
                  </div>

                  <div className="form-group">
                    <label>S·ªë ƒêi·ªán Tho·∫°i: *</label>
                    <input
                      type="text"
                      name="phone"
                      value={formData.phone}
                      onChange={handleInputChange}
                      required
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    />
                  </div>

                  <div className="form-group">
                    <label>Bi·ªÉn S·ªë Xe:</label>
                    <input
                      type="text"
                      name="license_number"
                      value={formData.license_number}
                      onChange={handleInputChange}
                      placeholder="VD: 29AB-91999"
                    />
                  </div>

                  <div className="form-group">
                    <label>Lo·∫°i Xe:</label>
                    <select
                      name="vehicle_type"
                      value={formData.vehicle_type}
                      onChange={handleInputChange}
                    >
                      <option value="">Ch·ªçn lo·∫°i xe</option>
                      <option value="Xe M√°y">Xe M√°y</option>
                      <option value="Xe √î T√¥">Xe √î T√¥</option>
                      <option value="Xe ƒê·∫°p">Xe ƒê·∫°p</option>
                    </select>
                  </div>

                  <div className="form-group checkbox">
                    <label>
                      <input
                        type="checkbox"
                        name="is_online"
                        checked={formData.is_online === true}
                        onChange={handleInputChange}
                      />
                      Tr·∫°ng th√°i Online ban ƒë·∫ßu
                    </label>
                    <span className="form-note">
                      Shipper s·∫Ω t·ª± qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa m√¨nh sau khi ƒëƒÉng nh·∫≠p
                    </span>
                  </div>
                </div>

                <div className="modal-actions">
                  <button 
                    type="button" 
                    className="cancel-btn"
                    onClick={() => setShowModal(false)}
                  >
                    H·ªßy
                  </button>
                  <button 
                    type="submit" 
                    className="save-btn"
                    disabled={loading}
                  >
                    {loading ? 'ƒêang x·ª≠ l√Ω...' : (isEditing ? 'C·∫≠p Nh·∫≠t Th√¥ng Tin' : 'T·∫°o Shipper')}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Detail Modal */}
        {showDetailModal && selectedShipper && (
          <div className="modal-overlay">
            <div className="modal detail-modal">
              <div className="modal-header">
                <h3>Chi Ti·∫øt Shipper</h3>
                <button 
                  className="close-btn"
                  onClick={() => setShowDetailModal(false)}
                >
                  √ó
                </button>
              </div>
              <div className="detail-content">
                {/* ‚úÖ Hi·ªÉn th·ªã ·∫£nh l·ªõn trong detail modal */}
                <div className="detail-image">
                  <div className="image-container-large">
                    {renderShipperImage(selectedShipper, 'large')}
                  </div>
                </div>
                
                <div className="detail-row">
                  <span className="label">T√™n Shipper:</span>
                  <span className="value">{selectedShipper.full_name}</span>
                </div>
                <div className="detail-row">
                  <span className="label">Email T√†i Kho·∫£n:</span>
                  <span className="value">
                    {getAccountEmail(selectedShipper)}
                    {selectedShipper.account?.is_lock && ' (B·ªã kh√≥a)'}
                  </span>
                </div>
                <div className="detail-row">
                  <span className="label">S·ªë ƒêi·ªán Tho·∫°i:</span>
                  <span className="value">{selectedShipper.phone}</span>
                </div>
                <div className="detail-row">
                  <span className="label">Bi·ªÉn S·ªë Xe:</span>
                  <span className="value">{selectedShipper.license_number || 'Ch∆∞a c√≥'}</span>
                </div>
                <div className="detail-row">
                  <span className="label">Lo·∫°i Xe:</span>
                  <span className="value">{selectedShipper.vehicle_type || 'Ch∆∞a c√≥'}</span>
                </div>
                <div className="detail-row">
                  <span className="label">Tr·∫°ng Th√°i:</span>
                  <span className={`value status ${getStatusDisplay(selectedShipper).class}`}>
                    <FaCircle className="status-icon" />
                    {getStatusDisplay(selectedShipper).text}
                  </span>
                </div>
                {selectedShipper.account && (
                  <div className="detail-row">
                    <span className="label">Tr·∫°ng Th√°i T√†i Kho·∫£n:</span>
                    <span className={`value ${selectedShipper.account.is_lock ? 'locked' : 'active'}`}>
                      {selectedShipper.account.is_lock ? (
                        <>
                          <FaLock className="icon" /> B·ªã kh√≥a
                        </>
                      ) : (
                        <>
                          <FaUnlock className="icon" /> Ho·∫°t ƒë·ªông
                        </>
                      )}
                    </span>
                  </div>
                )}
                {selectedShipper.account && (
                  <div className="detail-row">
                    <span className="label">Role T√†i Kho·∫£n:</span>
                    <span className="value">{selectedShipper.account.role}</span>
                  </div>
                )}
                {selectedShipper.updatedAt && (
                  <div className="detail-row">
                    <span className="label">C·∫≠p Nh·∫≠t Cu·ªëi:</span>
                    <span className="value">
                      {new Date(selectedShipper.updatedAt).toLocaleString('vi-VN')}
                    </span>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
};

export default ShipperManagement;
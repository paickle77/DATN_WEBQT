// src/Screens/CustomerManagement/CustomerManagement.jsx
import React, { useState, useEffect } from 'react';
import './CustomerManagement.scss';
import TabBarr from '../../component/tabbar/TabBar';
// Excel export
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';
import api from '../../utils/api';

const emptyCustomer = {
  name: '',
  email: '',
  phone: '',
  gender: '',
  birth_date: '',
  is_lock: false,
  address_id: ''
};

const CustomerManagement = () => {
  const [customers, setCustomers] = useState([]);
  const [addresses, setAddresses] = useState([]);
  const [customerStats, setCustomerStats] = useState({});
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [loading, setLoading] = useState(false);

  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState(emptyCustomer);
  const [editingId, setEditingId] = useState(null);

  useEffect(() => {
    fetchCustomersWithDetails();
    fetchAddresses();
    fetchCustomerStats();
  }, [currentPage, searchTerm]);

  // ‚úÖ S·ª≠ d·ª•ng API m·ªõi ƒë·ªÉ l·∫•y kh√°ch h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
  const fetchCustomersWithDetails = async () => {
    try {
      setLoading(true);
      const response = await api.get('/users/with-accounts', {
        params: {
          page: currentPage,
          limit: 20,
          search: searchTerm
        }
      });
      
      if (response.data.success) {
        setCustomers(response.data.data.customers);
        setTotalPages(response.data.data.pagination.totalPages);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng:', error);
      alert('Kh√¥ng th·ªÉ l·∫•y danh s√°ch kh√°ch h√†ng');
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ L·∫•y th·ªëng k√™ kh√°ch h√†ng
  const fetchCustomerStats = async () => {
    try {
      const response = await api.get('/users/stats');
      if (response.data.success) {
        setCustomerStats(response.data.data);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y th·ªëng k√™:', error);
    }
  };

  const fetchAddresses = async () => {
    try {
      const response = await api.get('/addresses');
      if (response.data.success) {
        setAddresses(response.data.data);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:', error);
    }
  };

  // ‚úÖ Xu·∫•t Excel v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
  const exportToExcel = async () => {
    try {
      setLoading(true);
      // L·∫•y t·∫•t c·∫£ kh√°ch h√†ng ƒë·ªÉ xu·∫•t
      const response = await api.get('/users/with-accounts', {
        params: { limit: 1000 }
      });
      
      const allCustomers = response.data.data.customers;
      
      const workbook = new ExcelJS.Workbook();
      const sheet = workbook.addWorksheet('Kh√°ch h√†ng');

      // Header v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
      const headers = [
        '#', 'T√™n', 'Email', 'SƒêT', 'Gi·ªõi t√≠nh', 'Tu·ªïi', 
        'ƒê·ªãa ch·ªâ', 'Tr·∫°ng th√°i', 'Lo·∫°i TK', 'T·ªïng ƒë∆°n h√†ng', 
        'T·ªïng chi ti√™u', 'Ng√†y t·∫°o'
      ];
      sheet.addRow(headers);
      sheet.getRow(1).font = { bold: true };
      sheet.getRow(1).fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFE0E0E0' }
      };

      // D·ªØ li·ªáu
      allCustomers.forEach((c, i) => {
        sheet.addRow([
          i + 1,
          c.name || '',
          c.email || '',
          c.phone || '',
          c.gender === 'male' ? 'Nam' : c.gender === 'female' ? 'N·ªØ' : 'Kh√°c',
          c.age || '',
          c.address_detail?.full_address || '',
          c.is_lock ? 'ƒê√£ kh√≥a' : 'Ho·∫°t ƒë·ªông',
          c.provider === 'local' ? 'T√†i kho·∫£n th∆∞·ªùng' : 
          c.provider === 'google' ? 'Google' : 
          c.provider === 'facebook' ? 'Facebook' : '',
          c.total_orders || 0,
          c.total_spent ? c.total_spent.toLocaleString('vi-VN') + ' ƒë' : '0 ƒë',
          c.created_at ? new Date(c.created_at).toLocaleDateString('vi-VN') : ''
        ]);
      });

      // T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh ƒë·ªô r·ªông c·ªôt
      sheet.columns.forEach(col => {
        let maxLen = 10;
        col.eachCell({ includeEmpty: true }, cell => {
          const cellValue = cell.value?.toString() || '';
          if (cellValue.length > maxLen) maxLen = cellValue.length;
        });
        col.width = Math.min(maxLen + 2, 50);
      });

      // Xu·∫•t file
      const buffer = await workbook.xlsx.writeBuffer();
      saveAs(new Blob([buffer]), `KhachHang_${new Date().toISOString().slice(0,10)}.xlsx`);
      
      alert('Xu·∫•t Excel th√†nh c√¥ng!');
    } catch (error) {
      console.error('L·ªói xu·∫•t Excel:', error);
      alert('L·ªói khi xu·∫•t Excel');
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ X√≥a kh√°ch h√†ng
  const handleDelete = async (id) => {
    if (window.confirm('X√≥a kh√°ch h√†ng n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
      try {
        await api.delete(`/users/${id}`);
        fetchCustomersWithDetails();
        alert('X√≥a kh√°ch h√†ng th√†nh c√¥ng!');
      } catch (error) {
        console.error('L·ªói khi x√≥a:', error);
        alert('L·ªói khi x√≥a kh√°ch h√†ng');
      }
    }
  };

  // ‚úÖ Kh√≥a/M·ªü kh√≥a t√†i kho·∫£n - s·ª≠ d·ª•ng API m·ªõi
  const handleToggleLock = async (userId, currentLockStatus) => {
    const action = currentLockStatus ? 'm·ªü kh√≥a' : 'kh√≥a';
    const reason = currentLockStatus ? '' : prompt('Nh·∫≠p l√Ω do kh√≥a t√†i kho·∫£n:');
    
    if (!currentLockStatus && !reason) {
      alert('Vui l√≤ng nh·∫≠p l√Ω do kh√≥a t√†i kho·∫£n');
      return;
    }

    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ${action} t√†i kho·∫£n n√†y?`)) {
      try {
        await api.put(`/users/${userId}/toggle-lock`, {
          is_lock: !currentLockStatus,
          reason: reason
        });
        
        fetchCustomersWithDetails();
        alert(`${action.charAt(0).toUpperCase() + action.slice(1)} t√†i kho·∫£n th√†nh c√¥ng!`);
      } catch (error) {
        console.error(`L·ªói khi ${action}:`, error);
        alert(`L·ªói khi ${action} t√†i kho·∫£n`);
      }
    }
  };

  // ‚úÖ Th√™m/S·ª≠a kh√°ch h√†ng
  const handleAdd = () => {
    setEditingId(null);
    setFormData(emptyCustomer);
    setShowForm(true);
  };
  
  const handleEdit = (c) => {
    setEditingId(c._id);
    setFormData({
      name: c.name || '',
      email: c.email || '',
      phone: c.phone || '',
      gender: c.gender || '',
      birth_date: c.birth_date ? c.birth_date.split('T')[0] : '',
      is_lock: c.is_lock || false,
      address_id: c.address_id || ''
    });
    setShowForm(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingId) {
        await api.put(`/users/${editingId}`, formData);
        alert('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
      } else {
        await api.post('/users', formData);
        alert('Th√™m kh√°ch h√†ng th√†nh c√¥ng!');
      }
      
      fetchCustomersWithDetails();
      setShowForm(false);
    } catch (error) {
      console.error('L·ªói khi l∆∞u:', error);
      alert(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
    }
  };

  // ‚úÖ T√¨m ki·∫øm v·ªõi debounce
  const handleSearch = (value) => {
    setSearchTerm(value);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu khi search
  };

  // ‚úÖ Format gi√° ti·ªÅn VND
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount || 0);
  };

  // ‚úÖ Format ng√†y th√°ng
  const formatDate = (dateString) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  // ‚úÖ T√≠nh tu·ªïi
  const calculateAge = (birthDate) => {
    if (!birthDate) return '';
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  };

  return (
    <div className="customer-management">
      <TabBarr />
      <h2>Qu·∫£n l√Ω kh√°ch h√†ng</h2>

      {/* ‚úÖ Th·ªëng k√™ t·ªïng quan */}
      {Object.keys(customerStats).length > 0 && (
        <div className="stats-overview">
          <div className="stat-card">
            <div className="stat-number">{customerStats.totalCustomers || 0}</div>
            <div className="stat-label">T·ªïng kh√°ch h√†ng</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{customerStats.activeCustomers || 0}</div>
            <div className="stat-label">ƒêang ho·∫°t ƒë·ªông</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{customerStats.customersWithOrders || 0}</div>
            <div className="stat-label">ƒê√£ mua h√†ng</div>
          </div>
          <div className="stat-card">
            <div className="stat-number">{formatCurrency(customerStats.totalRevenue)}</div>
            <div className="stat-label">T·ªïng doanh thu</div>
          </div>
        </div>
      )}

      <div className="top-bar">
        <div className="search-container">
          <div className="search-icon">üîç</div>
          <input
            type="text"
            placeholder="T√¨m ki·∫øm theo t√™n, email, s·ªë ƒëi·ªán tho·∫°i..."
            value={searchTerm}
            onChange={(e) => handleSearch(e.target.value)}
          />
        </div>
        <div className="action-buttons">
          <button className="btn-primary" onClick={handleAdd}>
            ‚ûï Th√™m kh√°ch h√†ng
          </button>
          <button className="btn-success" onClick={exportToExcel} disabled={loading}>
            {loading ? '‚è≥ ƒêang xu·∫•t...' : 'üìä Xu·∫•t Excel'}
          </button>
        </div>
      </div>

      {/* ‚úÖ Form th√™m/s·ª≠a v·ªõi c√°c tr∆∞·ªùng ƒë·∫ßy ƒë·ªß */}
      {showForm && (
        <div className="modal-overlay">
          <div className="modal-box">
            <form className="customer-form" onSubmit={handleSubmit}>
              <h3>{editingId ? '‚úèÔ∏è S·ª≠a kh√°ch h√†ng' : '‚ûï Th√™m kh√°ch h√†ng'}</h3>
              
              <div className="form-grid">
                <div className="form-row">
                  <label>üë§ T√™n:</label>
                  <input required
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    placeholder="Nh·∫≠p t√™n kh√°ch h√†ng"
                  />
                </div>
                
                <div className="form-row">
                  <label>üìß Email:</label>
                  <input type="email" required
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                    placeholder="Nh·∫≠p email"
                  />
                </div>
                
                <div className="form-row">
                  <label>üì± S·ªë ƒëi·ªán tho·∫°i:</label>
                  <input required
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                  />
                </div>
                
                <div className="form-row">
                  <label>‚ö• Gi·ªõi t√≠nh:</label>
                  <select
                    value={formData.gender}
                    onChange={(e) => setFormData({...formData, gender: e.target.value})}
                  >
                    <option value="">--Ch·ªçn gi·ªõi t√≠nh--</option>
                    <option value="male">Nam</option>
                    <option value="female">N·ªØ</option>
                    <option value="other">Kh√°c</option>
                  </select>
                </div>
                
                <div className="form-row">
                  <label>üéÇ Ng√†y sinh:</label>
                  <input
                    type="date"
                    value={formData.birth_date}
                    onChange={(e) => setFormData({...formData, birth_date: e.target.value})}
                  />
                </div>
                
                <div className="form-row">
                  <label>üè† ƒê·ªãa ch·ªâ:</label>
                  <select
                    value={formData.address_id}
                    onChange={(e) => setFormData({...formData, address_id: e.target.value})}
                  >
                    <option value="">--Ch·ªçn ƒë·ªãa ch·ªâ--</option>
                    {addresses.map((a) => (
                      <option key={a._id} value={a._id}>
                        {`${a.street || ''}, ${a.ward || ''}, ${a.district || ''}, ${a.city || ''}`}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              
              <div className="form-row checkbox-row">
                <label>üîí Kh√≥a t√†i kho·∫£n:</label>
                <input
                  type="checkbox"
                  checked={formData.is_lock}
                  onChange={(e) => setFormData({...formData, is_lock: e.target.checked})}
                />
              </div>
              
              <div className="form-actions">
                <button type="submit" disabled={loading}>
                  {loading ? '‚è≥' : (editingId ? 'üíæ L∆∞u' : '‚úÖ T·∫°o')}
                </button>
                <button type="button" onClick={() => setShowForm(false)}>
                  ‚ùå H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* ‚úÖ B·∫£ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß */}
      <div className="table-wrapper">
        {loading && <div className="loading-overlay">‚è≥ ƒêang t·∫£i...</div>}
        
        <table>
          <thead>
            <tr>
              <th>#</th>
              <th>üë§ T√™n</th>
              <th>üìß Email</th>
              <th>üì± SƒêT</th>
              <th>‚ö• GT</th>
              <th>üéÇ Tu·ªïi</th>
              <th>üè† ƒê·ªãa ch·ªâ</th>
              <th>üîë Lo·∫°i TK</th>
              <th>üìä ƒê∆°n h√†ng</th>
              <th>üí∞ T·ªïng chi</th>
              <th>üìÖ Ng√†y t·∫°o</th>
              <th>üìä Tr·∫°ng th√°i</th>
              <th>‚öôÔ∏è Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {customers.length > 0 ? (
              customers.map((c, i) => (
                <tr key={c._id} className={c.is_lock ? 'locked-row' : ''}>
                  <td>{(currentPage - 1) * 20 + i + 1}</td>
                  <td>
                    <div className="customer-info">
                      <img 
                        src={c.display_avatar} 
                        alt="avatar" 
                        className="customer-avatar"
                        onError={(e) => {e.target.src = '/default-avatar.png'}}
                      />
                      <span>{c.name || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                    </div>
                  </td>
                  <td>{c.email || 'Ch∆∞a c√≥'}</td>
                  <td>{c.phone || 'Ch∆∞a c√≥'}</td>
                  <td>
                    {c.gender === 'male' ? 'üë® Nam' : 
                     c.gender === 'female' ? 'üë© N·ªØ' : 
                     c.gender === 'other' ? 'ü§∑ Kh√°c' : '‚ùì'}
                  </td>
                  <td>{c.age ? `${c.age} tu·ªïi` : '‚ùì'}</td>
                  <td className="address-cell">
                    {c.address_detail?.full_address || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                  </td>
                  <td>
                    <span className={`provider-badge provider-${c.provider}`}>
                      {c.provider === 'local' ? 'üîê Local' : 
                       c.provider === 'google' ? 'üåê Google' :
                       c.provider === 'facebook' ? 'üìò Facebook' : '‚ùì'}
                    </span>
                  </td>
                  <td>{c.total_orders || 0} ƒë∆°n</td>
                  <td className="currency">{formatCurrency(c.total_spent)}</td>
                  <td>{formatDate(c.created_at)}</td>
                  <td>
                    {c.is_lock ? (
                      <span className="status-locked">üîí ƒê√£ kh√≥a</span>
                    ) : (
                      <span className="status-active">‚úÖ Ho·∫°t ƒë·ªông</span>
                    )}
                  </td>
                  <td className="actions-cell">
                    <button 
                      className="btn-edit"
                      onClick={() => handleEdit(c)}
                      title="Ch·ªânh s·ª≠a"
                    >
                      ‚úèÔ∏è
                    </button>
                    <button 
                      className="btn-delete"
                      onClick={() => handleDelete(c._id)}
                      title="X√≥a"
                    >
                      üóëÔ∏è
                    </button>
                    <button 
                      className={c.is_lock ? "btn-unlock" : "btn-lock"}
                      onClick={() => handleToggleLock(c._id, c.is_lock)}
                      title={c.is_lock ? "M·ªü kh√≥a" : "Kh√≥a t√†i kho·∫£n"}
                    >
                      {c.is_lock ? 'üîì' : 'üîí'}
                    </button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="13" className="empty-state">
                  {loading ? '‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...' : 'üìã Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng n√†o'}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* ‚úÖ Ph√¢n trang */}
      {totalPages > 1 && (
        <div className="pagination">
          <button 
            disabled={currentPage === 1}
            onClick={() => setCurrentPage(currentPage - 1)}
          >
            ‚Üê Tr∆∞·ªõc
          </button>
          
          <span className="page-info">
            Trang {currentPage} / {totalPages}
          </span>
          
          <button 
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage(currentPage + 1)}
          >
            Sau ‚Üí
          </button>
        </div>
      )}
    </div>
  );
};

export default CustomerManagement;